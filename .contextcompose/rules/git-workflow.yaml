version: 1
kind: rule
name: Git Workflow Rule
description: Comprehensive Git workflow guidelines for version control, branching strategies, and collaborative development
prompt: Follow Git Flow branching strategy, write meaningful commit messages using conventional commits, conduct thorough code reviews, maintain clean history, and ensure proper release management.
enhanced-prompt: |-
  Follow these comprehensive Git workflow principles for task-action development:

  ## Branching Strategy
  1. **Git Flow Model**:
     - **main**: Production-ready code, always stable
     - **develop**: Integration branch for features
     - **feature/***: New features and enhancements
     - **bugfix/***: Bug fixes for develop branch
     - **hotfix/***: Critical fixes for production
     - **release/***: Prepare new production releases

  2. **Branch Naming Conventions**:
     ```
     feature/task-action-cli-commands
     feature/slack-integration
     bugfix/yaml-parsing-error
     hotfix/security-vulnerability
     release/v1.2.0
     ```

  3. **Branch Lifecycle**:
     - Create feature branches from develop
     - Merge completed features back to develop
     - Create release branches from develop
     - Merge releases to both main and develop
     - Create hotfixes from main, merge to both main and develop

  ## Commit Message Standards
  1. **Conventional Commits Format**:
     ```
     <type>[optional scope]: <description>
     
     [optional body]
     
     [optional footer(s)]
     ```

  2. **Commit Types**:
     - **feat**: New features
     - **fix**: Bug fixes
     - **docs**: Documentation changes
     - **style**: Code style changes (formatting, etc.)
     - **refactor**: Code refactoring
     - **test**: Adding or updating tests
     - **chore**: Maintenance tasks
     - **perf**: Performance improvements
     - **ci**: CI/CD changes

  3. **Commit Examples**:
     ```
     feat(cli): add task-action status command
     
     Implement new CLI command to display current task statuses
     with color-coded output and filtering options.
     
     Closes #123
     
     fix(mcp): resolve parameter validation error
     
     Fixed issue where optional parameters were incorrectly
     marked as required in MCP tool schemas.
     
     Breaking change: Updated parameter validation logic
     
     docs: update README with installation instructions
     
     test(actions): add unit tests for git-branch action
     ```

  ## Code Review Process
  1. **Pull Request Requirements**:
     - All changes must go through Pull Request review
     - Minimum one approval from code owner
     - All CI checks must pass
     - No merge conflicts allowed
     - Up-to-date with target branch

  2. **PR Description Template**:
     ```markdown
     ## Description
     Brief description of changes
     
     ## Type of Change
     - [ ] Bug fix
     - [ ] New feature
     - [ ] Breaking change
     - [ ] Documentation update
     
     ## Testing
     - [ ] Unit tests added/updated
     - [ ] Integration tests added/updated
     - [ ] Manual testing completed
     
     ## Checklist
     - [ ] Code follows style guidelines
     - [ ] Self-review completed
     - [ ] Documentation updated
     - [ ] No breaking changes (or documented)
     ```

  3. **Review Guidelines**:
     - Review for functionality, not just syntax
     - Check for security vulnerabilities
     - Verify test coverage and quality
     - Ensure documentation is updated
     - Provide constructive feedback

  ## Commit Best Practices
  1. **Atomic Commits**:
     - One logical change per commit
     - Each commit should be buildable
     - Related changes grouped together
     - Separate refactoring from feature changes

  2. **Commit Frequency**:
     - Commit early and often
     - Don't commit broken code
     - Commit before switching contexts
     - Use staging area effectively

  3. **Commit Quality**:
     ```bash
     # Good: Specific, actionable commits
     git commit -m "feat(actions): implement Slack message action with template support"
     git commit -m "fix(parser): handle empty YAML files gracefully"
     git commit -m "test(cli): add integration tests for init command"
     
     # Bad: Vague, unhelpful commits
     git commit -m "fix stuff"
     git commit -m "work in progress"
     git commit -m "updates"
     ```

  ## History Management
  1. **Clean History**:
     - Use interactive rebase to clean up commits before merging
     - Squash related commits when appropriate
     - Remove debugging commits and temporary changes
     - Maintain logical commit progression

  2. **Rebase vs Merge**:
     - **Rebase**: For feature branches to maintain linear history
     - **Merge**: For integrating completed features
     - Use merge commits for important milestones
     - Avoid rewriting public history

  3. **Interactive Rebase**:
     ```bash
     # Clean up last 3 commits
     git rebase -i HEAD~3
     
     # Rebase feature branch onto latest develop
     git checkout feature/new-feature
     git rebase develop
     ```

  ## Release Management
  1. **Version Numbering**:
     - Follow Semantic Versioning (SemVer)
     - MAJOR.MINOR.PATCH format
     - MAJOR: Breaking changes
     - MINOR: New features (backward compatible)
     - PATCH: Bug fixes (backward compatible)

  2. **Release Process**:
     ```bash
     # Create release branch
     git checkout develop
     git pull origin develop
     git checkout -b release/v1.2.0
     
     # Update version numbers and changelog
     # Run final tests
     
     # Merge to main
     git checkout main
     git merge --no-ff release/v1.2.0
     git tag -a v1.2.0 -m "Release version 1.2.0"
     
     # Merge back to develop
     git checkout develop
     git merge --no-ff release/v1.2.0
     
     # Push everything
     git push origin main develop --tags
     ```

  3. **Changelog Management**:
     - Maintain CHANGELOG.md file
     - Document all user-facing changes
     - Group changes by type (Added, Changed, Fixed, Removed)
     - Include migration notes for breaking changes

  ## Collaboration Guidelines
  1. **Team Coordination**:
     - Communicate about large changes in advance
     - Use draft PRs for work-in-progress
     - Tag relevant team members for reviews
     - Resolve conflicts promptly

  2. **Conflict Resolution**:
     - Pull latest changes before starting work
     - Resolve conflicts locally before pushing
     - Use merge tools for complex conflicts
     - Test thoroughly after conflict resolution

  ## Git Configuration
  1. **Essential Git Config**:
     ```bash
     # User information
     git config --global user.name "Your Name"
     git config --global user.email "your.email@example.com"
     
     # Editor and merge tool
     git config --global core.editor "code --wait"
     git config --global merge.tool "vscode"
     
     # Useful aliases
     git config --global alias.st "status"
     git config --global alias.co "checkout"
     git config --global alias.br "branch"
     git config --global alias.lg "log --oneline --graph --decorate"
     ```

  2. **Gitignore Best Practices**:
     - Include environment-specific files
     - Exclude build artifacts and dependencies
     - Ignore IDE and OS-specific files
     - Keep gitignore organized and commented

  ## Security Considerations
  1. **Sensitive Data**:
     - Never commit secrets, API keys, or passwords
     - Use environment variables for sensitive configuration
     - Scan commits for accidentally committed secrets
     - Use git-secrets or similar tools

  2. **Signed Commits**:
     - Use GPG signing for important commits
     - Verify commit signatures in critical repositories
     - Configure GitHub to require signed commits

  ## Automation & Hooks
  1. **Git Hooks**:
     - Pre-commit: Run linting and formatting
     - Pre-push: Run tests before pushing
     - Commit-msg: Validate commit message format
     - Post-merge: Update dependencies or rebuild

  2. **CI Integration**:
     - Trigger builds on every push
     - Run different test suites for different branches
     - Automatic deployment from main branch
     - Status checks required for merging

  ## Troubleshooting Common Issues
  1. **Common Commands**:
     ```bash
     # Undo last commit (keep changes)
     git reset --soft HEAD~1
     
     # Undo last commit (discard changes)
     git reset --hard HEAD~1
     
     # Fix commit message
     git commit --amend -m "New message"
     
     # Stash changes temporarily
     git stash push -m "Work in progress"
     git stash pop
     
     # Cherry-pick specific commit
     git cherry-pick <commit-hash>
     ```

  2. **Recovery Strategies**:
     - Use reflog to recover lost commits
     - Create backup branches before risky operations
     - Use git bisect for finding problematic commits
     - Keep local backups of important work

  ## Continuous Improvement
  - Regularly review and update Git workflows
  - Share Git knowledge and best practices with team
  - Use Git analytics to identify improvement areas
  - Stay updated with Git features and tools
  - Document team-specific Git conventions
