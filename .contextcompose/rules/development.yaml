version: 1
kind: rule
name: Development Rule
description: Comprehensive development rules and best practices for context-compose development
prompt: Follow TypeScript strict mode, ESLint/Prettier standards, conventional commits, mandatory PR reviews, comprehensive documentation, and utilize sequential-thinking/context7/playwright for complex tasks.
enhanced-prompt: |-
  Follow these comprehensive development rules when working on context-compose:

  ## Code Quality Standards
  1. **TypeScript Excellence**:
     - Use strict TypeScript configuration with no implicit any
     - Define proper interfaces and types for all data structures
     - Implement comprehensive error handling with typed exceptions
     - Utilize advanced TypeScript features (generics, conditional types, etc.)

  2. **Code Formatting & Linting**:
     - ESLint configuration must be followed without exceptions
     - Prettier formatting applied to all code files
     - No linting warnings or errors allowed in production code
     - Use consistent naming conventions (camelCase, PascalCase, kebab-case)

  3. **Code Architecture**:
     - Follow SOLID principles and clean architecture patterns
     - Implement proper separation of concerns
     - Use dependency injection where appropriate
     - Maintain low coupling and high cohesion

  ## Version Control & Branching
  1. **Branch Management**:
     - Use feature/ prefix for new features: `feature/task-description`
     - Use bugfix/ prefix for bug fixes: `bugfix/issue-description`
     - Use hotfix/ prefix for critical fixes: `hotfix/critical-issue`
     - Keep branches focused on single features or fixes

  2. **Commit Standards**:
     - Follow Conventional Commits specification
     - Use meaningful, descriptive commit messages
     - Keep commits atomic (one logical change per commit)
     - Include issue/task references in commit messages

  ## Code Review Process
  1. **Pull Request Requirements**:
     - All code changes must go through Pull Request review
     - Minimum of one approval required before merging
     - Self-review mandatory before requesting reviews
     - Include comprehensive PR description with testing notes

  2. **Review Criteria**:
     - Code functionality and correctness
     - Performance implications and optimizations
     - Security considerations and vulnerability checks
     - Documentation completeness and accuracy

  ## Documentation Standards
  1. **Code Documentation**:
     - Comprehensive JSDoc comments for all public APIs
     - Inline comments for complex business logic
     - README files updated with new features and changes
     - API documentation generated and maintained

  2. **Project Documentation**:
     - Architecture decisions recorded (ADRs)
     - Setup and deployment instructions current
     - Troubleshooting guides maintained
     - Contributing guidelines followed

  ## Testing Requirements
  1. **Test Coverage**:
     - Minimum 80% code coverage for new features
     - Unit tests for all business logic
     - Integration tests for API endpoints
     - End-to-end tests for critical user workflows

  2. **Test Quality**:
     - Tests must be deterministic and reliable
     - No flaky tests allowed in main branch
     - Test data properly isolated and cleaned up
     - Performance tests for critical paths

  ## Tool Utilization
  1. **Complex Problem Solving**:
     - Use sequential-thinking for breaking down complex tasks
     - Apply systematic approach to architectural decisions
     - Document thought processes for future reference

  2. **Library Integration**:
     - Use context7 for researching library documentation
     - Verify compatibility and best practices
     - Follow official documentation and examples

  3. **Browser Testing**:
     - Utilize playwright for comprehensive browser testing
     - Test across multiple browsers and devices
     - Implement visual regression testing where applicable

  ## Performance & Security
  1. **Performance Standards**:
     - Monitor and optimize bundle sizes
     - Implement lazy loading where appropriate
     - Use performance profiling tools regularly
     - Set performance budgets and monitor them

  2. **Security Practices**:
     - Regular dependency vulnerability scans
     - Input validation and sanitization
     - Secure coding practices followed
     - Security headers and configurations implemented

  ## Continuous Integration
  1. **CI/CD Pipeline**:
     - All tests must pass before merging
     - Automated code quality checks enforced
     - Deployment automation properly configured
     - Rollback procedures documented and tested

  2. **Quality Gates**:
     - Code coverage thresholds enforced
     - Performance benchmarks maintained
     - Security scans passing
     - Documentation builds successfully
