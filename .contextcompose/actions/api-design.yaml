version: 1
kind: action
name: API Design
description: Comprehensive API design and documentation with OpenAPI specification, testing, and best practices implementation
prompt: Design RESTful API with OpenAPI specification, implement best practices, generate documentation, create tests, and establish API governance standards.
enhanced-prompt: |-
  # üîå Comprehensive API Design Workflow

  **Design, document, and implement RESTful APIs with industry best practices.**

  ## üìã Step 1: API Design Planning
  ```bash
  echo "=== API Design Planning ==="
  
  PROJECT_NAME=$(basename $(pwd))
  API_VERSION="v1"
  DESIGN_DATE=$(date '+%Y-%m-%d %H:%M:%S')
  
  echo "üîå Project: $PROJECT_NAME"
  echo "üìÖ Design Date: $DESIGN_DATE"
  echo "üè∑Ô∏è  API Version: $API_VERSION"
  echo ""
  
  # Create API design directory
  mkdir -p api-design/{specs,docs,tests,examples}
  API_DIR="api-design"
  
  echo "üìÅ API directory: $API_DIR"
  echo "‚úÖ API design planning completed"
  echo ""
  ```

  ## üìù Step 2: OpenAPI Specification Creation
  ```bash
  echo "=== OpenAPI Specification Creation ==="
  
  echo "üìù Creating OpenAPI 3.0 specification..."
  
  # Create main OpenAPI spec
  cat << EOF > "$API_DIR/specs/openapi.yaml"
  openapi: 3.0.3
  info:
    title: $PROJECT_NAME API
    description: RESTful API for $PROJECT_NAME
    version: 1.0.0
    contact:
      name: API Support
      email: api-support@example.com
    license:
      name: MIT
      url: https://opensource.org/licenses/MIT
  
  servers:
    - url: https://api.example.com/v1
      description: Production server
    - url: https://staging-api.example.com/v1
      description: Staging server
    - url: http://localhost:3000/api/v1
      description: Development server
  
  paths:
    /health:
      get:
        summary: Health check endpoint
        description: Returns the health status of the API
        operationId: getHealth
        tags:
          - Health
        responses:
          '200':
            description: API is healthy
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: "healthy"
                    timestamp:
                      type: string
                      format: date-time
                    version:
                      type: string
                      example: "1.0.0"
    
    /users:
      get:
        summary: List users
        description: Retrieve a list of users with pagination
        operationId: getUsers
        tags:
          - Users
        parameters:
          - name: page
            in: query
            description: Page number
            required: false
            schema:
              type: integer
              minimum: 1
              default: 1
          - name: limit
            in: query
            description: Number of items per page
            required: false
            schema:
              type: integer
              minimum: 1
              maximum: 100
              default: 20
          - name: sort
            in: query
            description: Sort field
            required: false
            schema:
              type: string
              enum: [name, email, created_at]
              default: created_at
        responses:
          '200':
            description: List of users
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        \$ref: '#/components/schemas/User'
                    pagination:
                      \$ref: '#/components/schemas/Pagination'
          '400':
            \$ref: '#/components/responses/BadRequest'
          '500':
            \$ref: '#/components/responses/InternalServerError'
      
      post:
        summary: Create user
        description: Create a new user
        operationId: createUser
        tags:
          - Users
        requestBody:
          required: true
          content:
            application/json:
              schema:
                \$ref: '#/components/schemas/CreateUserRequest'
        responses:
          '201':
            description: User created successfully
            content:
              application/json:
                schema:
                  \$ref: '#/components/schemas/User'
          '400':
            \$ref: '#/components/responses/BadRequest'
          '409':
            \$ref: '#/components/responses/Conflict'
          '500':
            \$ref: '#/components/responses/InternalServerError'
    
    /users/{userId}:
      get:
        summary: Get user by ID
        description: Retrieve a specific user by their ID
        operationId: getUserById
        tags:
          - Users
        parameters:
          - name: userId
            in: path
            required: true
            description: User ID
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: User details
            content:
              application/json:
                schema:
                  \$ref: '#/components/schemas/User'
          '404':
            \$ref: '#/components/responses/NotFound'
          '500':
            \$ref: '#/components/responses/InternalServerError'
      
      put:
        summary: Update user
        description: Update an existing user
        operationId: updateUser
        tags:
          - Users
        parameters:
          - name: userId
            in: path
            required: true
            description: User ID
            schema:
              type: string
              format: uuid
        requestBody:
          required: true
          content:
            application/json:
              schema:
                \$ref: '#/components/schemas/UpdateUserRequest'
        responses:
          '200':
            description: User updated successfully
            content:
              application/json:
                schema:
                  \$ref: '#/components/schemas/User'
          '400':
            \$ref: '#/components/responses/BadRequest'
          '404':
            \$ref: '#/components/responses/NotFound'
          '500':
            \$ref: '#/components/responses/InternalServerError'
      
      delete:
        summary: Delete user
        description: Delete a user by ID
        operationId: deleteUser
        tags:
          - Users
        parameters:
          - name: userId
            in: path
            required: true
            description: User ID
            schema:
              type: string
              format: uuid
        responses:
          '204':
            description: User deleted successfully
          '404':
            \$ref: '#/components/responses/NotFound'
          '500':
            \$ref: '#/components/responses/InternalServerError'
  
  components:
    schemas:
      User:
        type: object
        required:
          - id
          - email
          - name
          - created_at
        properties:
          id:
            type: string
            format: uuid
            description: Unique user identifier
          email:
            type: string
            format: email
            description: User email address
          name:
            type: string
            description: User full name
            minLength: 1
            maxLength: 100
          avatar_url:
            type: string
            format: uri
            description: User avatar image URL
          created_at:
            type: string
            format: date-time
            description: User creation timestamp
          updated_at:
            type: string
            format: date-time
            description: User last update timestamp
      
      CreateUserRequest:
        type: object
        required:
          - email
          - name
        properties:
          email:
            type: string
            format: email
            description: User email address
          name:
            type: string
            description: User full name
            minLength: 1
            maxLength: 100
          avatar_url:
            type: string
            format: uri
            description: User avatar image URL
      
      UpdateUserRequest:
        type: object
        properties:
          email:
            type: string
            format: email
            description: User email address
          name:
            type: string
            description: User full name
            minLength: 1
            maxLength: 100
          avatar_url:
            type: string
            format: uri
            description: User avatar image URL
      
      Pagination:
        type: object
        properties:
          page:
            type: integer
            description: Current page number
          limit:
            type: integer
            description: Items per page
          total:
            type: integer
            description: Total number of items
          total_pages:
            type: integer
            description: Total number of pages
      
      Error:
        type: object
        required:
          - error
        properties:
          error:
            type: object
            required:
              - code
              - message
            properties:
              code:
                type: string
                description: Error code
              message:
                type: string
                description: Error message
              details:
                type: string
                description: Additional error details
    
    responses:
      BadRequest:
        description: Bad request
        content:
          application/json:
            schema:
              \$ref: '#/components/schemas/Error'
            example:
              error:
                code: "INVALID_REQUEST"
                message: "The request is invalid"
                details: "Validation failed for field 'email'"
      
      NotFound:
        description: Resource not found
        content:
          application/json:
            schema:
              \$ref: '#/components/schemas/Error'
            example:
              error:
                code: "NOT_FOUND"
                message: "Resource not found"
                details: "User with ID '123' does not exist"
      
      Conflict:
        description: Resource conflict
        content:
          application/json:
            schema:
              \$ref: '#/components/schemas/Error'
            example:
              error:
                code: "CONFLICT"
                message: "Resource already exists"
                details: "User with email 'user@example.com' already exists"
      
      InternalServerError:
        description: Internal server error
        content:
          application/json:
            schema:
              \$ref: '#/components/schemas/Error'
            example:
              error:
                code: "INTERNAL_ERROR"
                message: "An internal error occurred"
                details: "Please try again later"
    
    securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
      ApiKeyAuth:
        type: apiKey
        in: header
        name: X-API-Key
  
  security:
    - BearerAuth: []
    - ApiKeyAuth: []
  
  tags:
    - name: Health
      description: Health check operations
    - name: Users
      description: User management operations
  EOF
  
  echo "‚úÖ OpenAPI specification created"
  echo ""
  ```

  ## üìö Step 3: API Documentation Generation
  ```bash
  echo "=== API Documentation Generation ==="
  
  echo "üìö Generating API documentation..."
  
  # Create API documentation
  cat << EOF > "$API_DIR/docs/README.md"
  # $PROJECT_NAME API Documentation
  
  ## Overview
  
  The $PROJECT_NAME API is a RESTful web service that provides access to $PROJECT_NAME functionality.
  
  ## Base URL
  
  \`\`\`
  https://api.example.com/v1
  \`\`\`
  
  ## Authentication
  
  The API supports two authentication methods:
  
  ### Bearer Token (JWT)
  
  \`\`\`bash
  curl -H "Authorization: Bearer YOUR_JWT_TOKEN" https://api.example.com/v1/users
  \`\`\`
  
  ### API Key
  
  \`\`\`bash
  curl -H "X-API-Key: YOUR_API_KEY" https://api.example.com/v1/users
  \`\`\`
  
  ## Rate Limiting
  
  The API implements rate limiting to ensure fair usage:
  
  - **Rate Limit**: 1000 requests per hour per API key
  - **Burst Limit**: 100 requests per minute
  
  Rate limit information is included in response headers:
  
  \`\`\`
  X-RateLimit-Limit: 1000
  X-RateLimit-Remaining: 999
  X-RateLimit-Reset: 1640995200
  \`\`\`
  
  ## Response Format
  
  All API responses use JSON format with consistent structure:
  
  ### Success Response
  
  \`\`\`json
  {
    "data": {
      // Response data
    },
    "pagination": {
      // Pagination info (for list endpoints)
    }
  }
  \`\`\`
  
  ### Error Response
  
  \`\`\`json
  {
    "error": {
      "code": "ERROR_CODE",
      "message": "Human readable error message",
      "details": "Additional error details"
    }
  }
  \`\`\`
  
  ## HTTP Status Codes
  
  | Code | Description |
  |------|-------------|
  | 200  | OK - Request successful |
  | 201  | Created - Resource created |
  | 204  | No Content - Request successful, no content |
  | 400  | Bad Request - Invalid request |
  | 401  | Unauthorized - Authentication required |
  | 403  | Forbidden - Access denied |
  | 404  | Not Found - Resource not found |
  | 409  | Conflict - Resource conflict |
  | 429  | Too Many Requests - Rate limit exceeded |
  | 500  | Internal Server Error - Server error |
  
  ## Pagination
  
  List endpoints support pagination using query parameters:
  
  - \`page\`: Page number (default: 1)
  - \`limit\`: Items per page (default: 20, max: 100)
  - \`sort\`: Sort field and direction
  
  Example:
  \`\`\`
  GET /users?page=2&limit=50&sort=name
  \`\`\`
  
  ## Filtering and Searching
  
  Many endpoints support filtering and searching:
  
  \`\`\`
  GET /users?search=john&status=active&created_after=2023-01-01
  \`\`\`
  
  ## Versioning
  
  The API uses URL versioning:
  
  - Current version: v1
  - URL format: \`/api/v1/endpoint\`
  
  ## SDKs and Libraries
  
  Official SDKs are available for:
  
  - JavaScript/TypeScript: \`npm install @company/api-client\`
  - Python: \`pip install company-api-client\`
  - Go: \`go get github.com/company/api-client-go\`
  
  ## Support
  
  - üìß Email: api-support@example.com
  - üìñ Documentation: https://docs.example.com
  - üêõ Issues: https://github.com/company/api/issues
  EOF
  
  echo "‚úÖ API documentation generated"
  echo ""
  ```

  ## üß™ Step 4: API Testing Suite Creation
  ```bash
  echo "=== API Testing Suite Creation ==="
  
  echo "üß™ Creating comprehensive API tests..."
  
  # Create Postman collection
  cat << EOF > "$API_DIR/tests/postman-collection.json"
  {
    "info": {
      "name": "$PROJECT_NAME API Tests",
      "description": "Comprehensive API test suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
      {
        "key": "baseUrl",
        "value": "http://localhost:3000/api/v1"
      },
      {
        "key": "authToken",
        "value": ""
      }
    ],
    "item": [
      {
        "name": "Health Check",
        "request": {
          "method": "GET",
          "header": [],
          "url": {
            "raw": "{{baseUrl}}/health",
            "host": ["{{baseUrl}}"],
            "path": ["health"]
          }
        },
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has status field', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('status');",
                "});"
              ]
            }
          }
        ]
      },
      {
        "name": "Get Users",
        "request": {
          "method": "GET",
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/users?page=1&limit=20",
            "host": ["{{baseUrl}}"],
            "path": ["users"],
            "query": [
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "limit",
                "value": "20"
              }
            ]
          }
        },
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has data array', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('data');",
                "    pm.expect(jsonData.data).to.be.an('array');",
                "});",
                "",
                "pm.test('Response has pagination', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('pagination');",
                "});"
              ]
            }
          }
        ]
      }
    ]
  }
  EOF
  
  # Create Jest API tests
  cat << 'EOF' > "$API_DIR/tests/api.test.js"
  const request = require('supertest');
  const app = require('../../../app'); // Adjust path as needed
  
  describe('API Tests', () => {
    describe('Health Check', () => {
      test('GET /health should return 200', async () => {
        const response = await request(app)
          .get('/api/v1/health')
          .expect(200);
        
        expect(response.body).toHaveProperty('status');
        expect(response.body.status).toBe('healthy');
      });
    });
    
    describe('Users API', () => {
      test('GET /users should return paginated users', async () => {
        const response = await request(app)
          .get('/api/v1/users')
          .expect(200);
        
        expect(response.body).toHaveProperty('data');
        expect(response.body).toHaveProperty('pagination');
        expect(Array.isArray(response.body.data)).toBe(true);
      });
      
      test('GET /users with pagination params', async () => {
        const response = await request(app)
          .get('/api/v1/users?page=1&limit=10')
          .expect(200);
        
        expect(response.body.pagination.page).toBe(1);
        expect(response.body.pagination.limit).toBe(10);
      });
      
      test('POST /users should create new user', async () => {
        const newUser = {
          email: 'test@example.com',
          name: 'Test User'
        };
        
        const response = await request(app)
          .post('/api/v1/users')
          .send(newUser)
          .expect(201);
        
        expect(response.body).toHaveProperty('id');
        expect(response.body.email).toBe(newUser.email);
        expect(response.body.name).toBe(newUser.name);
      });
      
      test('GET /users/:id should return specific user', async () => {
        // Assuming user with ID exists
        const userId = 'test-user-id';
        
        const response = await request(app)
          .get(\`/api/v1/users/\${userId}\`)
          .expect(200);
        
        expect(response.body).toHaveProperty('id');
        expect(response.body.id).toBe(userId);
      });
      
      test('PUT /users/:id should update user', async () => {
        const userId = 'test-user-id';
        const updateData = {
          name: 'Updated Name'
        };
        
        const response = await request(app)
          .put(\`/api/v1/users/\${userId}\`)
          .send(updateData)
          .expect(200);
        
        expect(response.body.name).toBe(updateData.name);
      });
      
      test('DELETE /users/:id should delete user', async () => {
        const userId = 'test-user-id';
        
        await request(app)
          .delete(\`/api/v1/users/\${userId}\`)
          .expect(204);
      });
    });
    
    describe('Error Handling', () => {
      test('GET /users/:id with invalid ID should return 404', async () => {
        const response = await request(app)
          .get('/api/v1/users/invalid-id')
          .expect(404);
        
        expect(response.body).toHaveProperty('error');
        expect(response.body.error.code).toBe('NOT_FOUND');
      });
      
      test('POST /users with invalid data should return 400', async () => {
        const invalidUser = {
          email: 'invalid-email'
          // missing required name field
        };
        
        const response = await request(app)
          .post('/api/v1/users')
          .send(invalidUser)
          .expect(400);
        
        expect(response.body).toHaveProperty('error');
        expect(response.body.error.code).toBe('INVALID_REQUEST');
      });
    });
  });
  EOF
  
  echo "‚úÖ API testing suite created"
  echo ""
  ```

  ## üìã Step 5: API Implementation Guidelines
  ```bash
  echo "=== API Implementation Guidelines ==="
  
  echo "üìã Creating implementation guidelines..."
  
  # Create implementation guide
  cat << EOF > "$API_DIR/docs/implementation-guide.md"
  # API Implementation Guide
  
  ## Project Structure
  
  \`\`\`
  src/
  ‚îú‚îÄ‚îÄ controllers/          # Request handlers
  ‚îú‚îÄ‚îÄ middleware/          # Custom middleware
  ‚îú‚îÄ‚îÄ models/             # Data models
  ‚îú‚îÄ‚îÄ routes/             # Route definitions
  ‚îú‚îÄ‚îÄ services/           # Business logic
  ‚îú‚îÄ‚îÄ utils/              # Utility functions
  ‚îî‚îÄ‚îÄ validators/         # Input validation
  \`\`\`
  
  ## Best Practices
  
  ### 1. RESTful Design
  - Use HTTP methods correctly (GET, POST, PUT, DELETE)
  - Use plural nouns for resource names
  - Use consistent URL patterns
  - Implement proper status codes
  
  ### 2. Error Handling
  - Consistent error response format
  - Meaningful error messages
  - Proper HTTP status codes
  - Error logging and monitoring
  
  ### 3. Security
  - Input validation and sanitization
  - Authentication and authorization
  - Rate limiting
  - CORS configuration
  - Security headers
  
  ### 4. Performance
  - Database query optimization
  - Caching strategies
  - Pagination for large datasets
  - Response compression
  
  ### 5. Documentation
  - OpenAPI specification
  - Code comments
  - API documentation
  - Examples and tutorials
  
  ## Code Examples
  
  ### Express.js Controller
  
  \`\`\`javascript
  const userService = require('../services/userService');
  const { validationResult } = require('express-validator');
  
  exports.getUsers = async (req, res, next) => {
    try {
      const { page = 1, limit = 20, sort = 'created_at' } = req.query;
      
      const result = await userService.getUsers({
        page: parseInt(page),
        limit: parseInt(limit),
        sort
      });
      
      res.json({
        data: result.users,
        pagination: result.pagination
      });
    } catch (error) {
      next(error);
    }
  };
  
  exports.createUser = async (req, res, next) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          error: {
            code: 'INVALID_REQUEST',
            message: 'Validation failed',
            details: errors.array()
          }
        });
      }
      
      const user = await userService.createUser(req.body);
      
      res.status(201).json(user);
    } catch (error) {
      next(error);
    }
  };
  \`\`\`
  
  ### Input Validation
  
  \`\`\`javascript
  const { body, param, query } = require('express-validator');
  
  exports.validateCreateUser = [
    body('email')
      .isEmail()
      .normalizeEmail()
      .withMessage('Valid email is required'),
    body('name')
      .trim()
      .isLength({ min: 1, max: 100 })
      .withMessage('Name must be 1-100 characters'),
    body('avatar_url')
      .optional()
      .isURL()
      .withMessage('Avatar URL must be valid')
  ];
  
  exports.validateUserId = [
    param('userId')
      .isUUID()
      .withMessage('User ID must be a valid UUID')
  ];
  \`\`\`
  
  ### Error Middleware
  
  \`\`\`javascript
  exports.errorHandler = (err, req, res, next) => {
    console.error(err.stack);
    
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        error: {
          code: 'INVALID_REQUEST',
          message: 'Validation failed',
          details: err.message
        }
      });
    }
    
    if (err.name === 'NotFoundError') {
      return res.status(404).json({
        error: {
          code: 'NOT_FOUND',
          message: 'Resource not found',
          details: err.message
        }
      });
    }
    
    res.status(500).json({
      error: {
        code: 'INTERNAL_ERROR',
        message: 'An internal error occurred',
        details: process.env.NODE_ENV === 'development' ? err.message : undefined
      }
    });
  };
  \`\`\`
  EOF
  
  echo "‚úÖ Implementation guidelines created"
  echo ""
  ```

  ## üéØ Step 6: API Design Summary
  ```bash
  echo "=== API Design Summary ==="
  
  echo "üîå API design workflow completed!"
  echo ""
  echo "üìÅ Generated Files:"
  echo "  üìù OpenAPI Specification: $API_DIR/specs/openapi.yaml"
  echo "  üìö API Documentation: $API_DIR/docs/README.md"
  echo "  üìã Implementation Guide: $API_DIR/docs/implementation-guide.md"
  echo "  üß™ Postman Collection: $API_DIR/tests/postman-collection.json"
  echo "  üß™ Jest Tests: $API_DIR/tests/api.test.js"
  echo ""
  echo "üéØ Next Steps:"
  echo "  1. Review and customize OpenAPI specification"
  echo "  2. Implement API endpoints following the guide"
  echo "  3. Set up API testing with Postman/Jest"
  echo "  4. Generate API documentation website"
  echo "  5. Implement authentication and authorization"
  echo "  6. Add rate limiting and security middleware"
  echo ""
  echo "üõ†Ô∏è  Recommended Tools:"
  echo "  - Swagger UI for documentation"
  echo "  - Postman for API testing"
  echo "  - Jest/Supertest for automated testing"
  echo "  - Express.js for implementation"
  echo ""
  echo "üìñ Documentation URLs:"
  echo "  - Swagger UI: http://localhost:3000/api-docs"
  echo "  - Postman Collection: Import $API_DIR/tests/postman-collection.json"
  echo ""
  echo "üîå Professional API design completed with comprehensive documentation!"
  ```

  **üîå Complete API design workflow with OpenAPI specification, documentation, and testing suite!**
