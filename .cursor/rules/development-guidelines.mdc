---
description:
globs:
alwaysApply: false
---
# Development Guidelines

## Code Standards

### TypeScript Configuration
- Use strict TypeScript settings defined in [tsconfig.json](mdc:tsconfig.json)
- Enable all strict type checking options
- Use `import type` for type-only imports
- Prefer `interface` over `type` for object shapes

### File Naming Conventions
- Use kebab-case for directories and configuration files
- Use camelCase for TypeScript/JavaScript files
- Use PascalCase for class names and component files
- Add `.test.ts` suffix for test files

### Import Organization
1. Node.js built-in modules
2. Third-party packages
3. Internal modules (using `@/` path alias)
4. Relative imports
5. Type imports at the end

### Code Style
- Follow ESLint rules defined in [.eslintrc.json](mdc:.eslintrc.json)
- Use Prettier formatting from [.prettierrc](mdc:.prettierrc)
- Prefer async/await over Promises
- Use meaningful variable and function names
- Add JSDoc comments for public APIs

## Architecture Patterns

### Shared Business Logic Pattern
When adding new tools, follow this structure:
1. **Core Logic**: Implement in `src/core/tools/` - pure business logic
2. **Schema**: Define Zod schemas in `src/schemas/`
3. **MCP Tool**: Create tool wrapper in `mcp-server/src/tools/`
4. **CLI Command**: Create command in `src/cli/commands/`

### Error Handling
- Use Zod for input validation
- Throw descriptive errors with context
- Handle async operations with proper try-catch
- Return structured results with success/error states

### Environment Variables
- Use [dotenv](mdc:package.json) for local development
- Document required environment variables in tool descriptions
- Provide clear error messages for missing variables

## Testing Strategy

### Unit Tests
- Write tests for core business logic in `tests/unit/`
- Use Vitest with [vitest.config.ts](mdc:vitest.config.ts)
- Mock external dependencies
- Aim for high coverage of `src/core/` directory

### E2E Tests
- Use Playwright for end-to-end testing
- Test CLI commands and MCP server interactions
- Configuration in [playwright.config.ts](mdc:playwright.config.ts)

### Test Commands
```bash
pnpm test          # Run unit tests
pnpm test:e2e      # Run E2E tests (if available)
pnpm type-check    # TypeScript compilation check
```

## Development Workflow

### Building and Running
```bash
pnpm build         # Compile TypeScript to dist/
pnpm dev:server    # Run MCP server in development
pnpm dev:cli       # Run CLI in development
pnpm task-action   # Direct CLI execution
```

### Code Quality
```bash
pnpm lint          # Check ESLint rules
pnpm lint:fix      # Auto-fix ESLint issues
pnpm format        # Format with Prettier
pnpm format:check  # Check Prettier formatting
```

### MCP Development
- Use `pnpm inspect` to test MCP server with Inspector
- Server runs on stdio transport for local development
- HTTP SSE transport available for remote usage
