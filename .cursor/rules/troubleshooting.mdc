---
description:
globs:
alwaysApply: false
---
# 문제 해결 및 디버깅 가이드

## 일반적인 문제 해결

### 빌드 오류
- **TypeScript 컴파일 오류**: `pnpm type-check`로 타입 오류 확인
- **의존성 문제**: `pnpm install`로 의존성 재설치
- **캐시 문제**: `pnpm store prune`으로 캐시 정리

### 런타임 오류
- **환경 변수 누락**: `.env` 파일 확인 (Slack, Discord webhook URL)
- **포트 충돌**: MCP 서버 포트 변경 필요시 설정 확인
- **권한 문제**: Node.js 18+ 버전 확인

## MCP 서버 디버깅

### MCP Inspector 사용
```bash
# 개발 모드에서 서버 검사
pnpm inspect

# 빌드된 서버 검사
pnpm inspect:built
```

### 로그 확인
- 서버 로그는 콘솔에 출력
- [mcp-server/src/logger.ts](mdc:mcp-server/src/logger.ts)에서 로깅 설정 확인
- 디버그 모드 활성화 방법 확인

### 연결 문제
- Stdio 전송 방식 확인
- 클라이언트 설정 검증
- 프로토콜 버전 호환성 확인

## CLI 도구 디버깅

### 명령어 실행 오류
```bash
# 직접 실행으로 디버깅
pnpm task-action --help

# 개발 모드로 실행
pnpm dev:cli
```

### 환경 설정
- 환경 변수 로딩 확인
- 설정 파일 경로 검증
- 권한 및 파일 접근 확인

## 테스트 관련 문제

### 단위 테스트 실패
- `pnpm test` 실행 후 오류 메시지 확인
- [vitest.config.ts](mdc:vitest.config.ts) 설정 검토
- 모킹 설정 확인

### E2E 테스트 실패
- Playwright 브라우저 설치 확인: `npx playwright install`
- [playwright.config.ts](mdc:playwright.config.ts) 설정 검토
- 테스트 환경 격리 확인

## 성능 최적화

### 빌드 성능
- TypeScript 컴파일 최적화
- 불필요한 의존성 제거
- 트리 쉐이킹 활용

### 런타임 성능
- 비동기 처리 최적화
- 메모리 사용량 모니터링
- 로깅 레벨 조정

## 개발 환경 설정

### IDE 설정
- TypeScript 언어 서버 활성화
- ESLint, Prettier 플러그인 설치
- 디버거 설정 확인

### Git 워크플로우
- 커밋 전 린트 검사 실행
- 브랜치별 기능 개발
- PR 전 테스트 실행 필수
