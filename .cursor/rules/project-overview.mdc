---
description:
globs:
alwaysApply: false
---
# Task Action MCP Project Overview

## Project Summary
This is a Model Context Protocol (MCP) server and CLI toolkit called "task-action" built with TypeScript, Node.js, and FastMCP. The project provides both an MCP server for LLM integration and a CLI tool for direct command-line usage.

## Key Technologies
- **Runtime**: Node.js 18+
- **Language**: TypeScript with strict type checking
- **MCP Framework**: FastMCP
- **Package Manager**: pnpm
- **CLI Framework**: Commander.js
- **Schema Validation**: Zod
- **Testing**: Vitest (unit) + Playwright (E2E)
- **Linting**: ESLint + Prettier

## Architecture Principles
- **Shared Business Logic**: Core functionality is shared between CLI and MCP server to avoid duplication
- **Type Safety**: Full TypeScript coverage with Zod schema validation
- **Single Package, Multiple Entry Points**: Unified package with both CLI and server capabilities
- **Clean Separation**: Business logic separated from interface logic

## Entry Points
- **MCP Server**: [mcp-server/server.ts](mdc:mcp-server/server.ts) - FastMCP server entry point
- **CLI Tool**: [src/cli/index.ts](mdc:src/cli/index.ts) - Commander.js CLI entry point
- **Package Configuration**: [package.json](mdc:package.json) - Defines binary entry points

## Core Directories
- `mcp-server/` - MCP server implementation using FastMCP
- `src/core/` - Shared business logic for tools
- `src/schemas/` - Zod schema definitions for tool parameters
- `src/cli/` - CLI command implementations
- `src/types/` - Common TypeScript type definitions
- `tests/` - Test suites (unit and E2E)

## Available Tools
The project implements several tools that work in both CLI and MCP contexts:
1. **init** - Project initialization with template copying
2. **send-message-slack** - Send messages to Slack via webhook
3. **send-message-discord** - Send messages to Discord via webhook
4. **add-task** - Create new task files from templates

