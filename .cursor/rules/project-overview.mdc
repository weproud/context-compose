---
description:
globs:
alwaysApply: false
---
# Context Compose Project Overview

This project is **Context Compose**, a TypeScript-based package that provides Model Context Protocol (MCP) server and CLI tools.

## Project Structure

- **Main Entry Points**: Dual entry point structure defined in [package.json](mdc:package.json)
- **CLI Tool**: `context-compose` - starts from [src/cli/index.ts](mdc:src/cli/index.ts)
- **MCP Server**: `context-compose-mcp` - starts from [mcp-server/server.ts](mdc:mcp-server/server.ts)
- **Build Configuration**: [tsconfig.json](mdc:tsconfig.json) and [eslint.config.js](mdc:eslint.config.js)
- **Testing**: [vitest.config.ts](mdc:vitest.config.ts) and [playwright.config.ts](mdc:playwright.config.ts)

## Core Features

1. **MCP Server**: Direct integration with AI models (Claude, ChatGPT, etc.)
2. **CLI Tool**: Context management and workflow execution from terminal
3. **Context System**: Project-specific development guidelines and rules management
4. **Workflow Engine**: Automated task flows for development, testing, deployment
5. **Role-based Development**: Apply expert personas like Dan Abramov, Martin Fowler
6. **Notification System**: Work status notifications via Slack, email, and other channels

## Key Dependencies

- **fastmcp**: MCP server implementation
- **commander**: CLI interface
- **inquirer**: Interactive prompts
- **mustache**: Template engine
- **yaml**: YAML file processing
- **zod**: Schema validation
