---
description:
globs:
alwaysApply: false
---
# MCP Patterns and Guidelines

## Model Context Protocol Overview

This project implements an MCP server using FastMCP, providing tools, resources, and prompts for Large Language Models to interact with external systems.

## MCP Server Architecture

### Entry Point
The main MCP server is defined in [mcp-server/src/index.ts](mdc:mcp-server/src/index.ts) and started via [mcp-server/server.ts](mdc:mcp-server/server.ts).

### Tool Registration Pattern
Tools are registered in the MCP server following this pattern:
```typescript
// In mcp-server/src/tools/example.ts
import { tool } from 'fastmcp';
import { exampleSchema } from '@/schemas';
import { executeExampleTool } from '@/core/tools';

export const exampleTool = tool({
  name: 'example',
  description: 'Tool description for LLM',
  inputSchema: exampleSchema,
}, async (input) => {
  return await executeExampleTool(input);
});
```

### Tool Organization
- **Tool Definitions**: `mcp-server/src/tools/` - MCP tool wrappers
- **Business Logic**: `src/core/tools/` - Shared implementation
- **Schemas**: `src/schemas/` - Zod validation schemas
- **Registration**: Tools are exported from `mcp-server/src/tools/index.ts`

## Schema Design Patterns

### Zod Schema Structure
All tool parameters use Zod schemas for validation:
```typescript
// In src/schemas/example.ts
import { z } from 'zod';

export const exampleSchema = z.object({
  requiredParam: z.string().min(1, 'Required parameter cannot be empty'),
  optionalParam: z.string().optional(),
  configPath: z.string().default('.taskaction'),
});

export type ExampleInput = z.infer<typeof exampleSchema>;
```

### Schema Best Practices
- Use descriptive error messages
- Provide sensible defaults
- Use `.min(1)` for required string parameters
- Export TypeScript types using `z.infer<>`
- Group related schemas in single files

## Tool Implementation Patterns

### Core Tool Structure
All tools follow this pattern in `src/core/tools/`:
```typescript
import type { ExampleInput } from '@/schemas/example';

export async function executeExampleTool(input: ExampleInput): Promise<{
  success: boolean;
  message: string;
  data?: any;
}> {
  try {
    // Validate input (Zod handles this)
    // Execute business logic
    // Return structured response
    return {
      success: true,
      message: 'Operation completed successfully',
      data: result
    };
  } catch (error) {
    return {
      success: false,
      message: `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
}
```

### Tool Response Pattern
- Always return structured responses with `success` boolean
- Include descriptive `message` for both success and error cases
- Optionally include `data` for successful operations
- Handle errors gracefully and return user-friendly messages

## MCP Server Configuration

### Transport Configuration
The server supports multiple transports:
- **Stdio**: For local development and testing
- **HTTP SSE**: For remote access (configured in server setup)

### Environment Variables
Tools that require external services should:
- Check for required environment variables
- Provide clear error messages when missing
- Document variables in tool descriptions

### Development Tools
- **MCP Inspector**: Use `pnpm inspect` for interactive testing
- **FastMCP CLI**: Built-in debugging and inspection capabilities
- **Logging**: Structured logging through FastMCP logger

## Testing MCP Tools

### Unit Testing
Test core tool logic independently:
```typescript
import { executeExampleTool } from '@/core/tools/example';

test('should execute example tool successfully', async () => {
  const result = await executeExampleTool({
    requiredParam: 'test',
    configPath: '.test'
  });
  
  expect(result.success).toBe(true);
  expect(result.message).toContain('success');
});
```

### Integration Testing
Use MCP Inspector or direct server testing for integration tests.

## Adding New Tools

### Step-by-Step Process
1. **Define Schema**: Create Zod schema in `src/schemas/`
2. **Implement Logic**: Add core function in `src/core/tools/`
3. **Create MCP Tool**: Add FastMCP tool wrapper in `mcp-server/src/tools/`
4. **Add CLI Command**: Create CLI command in `src/cli/commands/`
5. **Register Tool**: Export from appropriate index files
6. **Write Tests**: Add unit tests for core logic
7. **Update Documentation**: Document tool usage and requirements
