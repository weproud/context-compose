---
description:
globs:
alwaysApply: false
---
# 새로운 기능 추가 가이드

## 새로운 도구(Tool) 추가하기

### 1단계: 스키마 정의
`src/schemas/` 디렉토리에 새로운 스키마 파일 생성:

```typescript
// src/schemas/new-tool.ts
import { z } from 'zod';

export const NewToolSchema = z.object({
  input: z.string().describe('입력 설명'),
  options: z.object({
    flag: z.boolean().optional().describe('옵션 플래그')
  }).optional()
});

export type NewToolInput = z.infer<typeof NewToolSchema>;
```

### 2단계: 공유 비즈니스 로직 구현
`src/core/tools/` 디렉토리에 비즈니스 로직 구현:

```typescript
// src/core/tools/new-tool.ts
import { NewToolInput } from '@/schemas/new-tool';

export async function executeNewTool(input: NewToolInput) {
  // 비즈니스 로직 구현
  return {
    success: true,
    message: '작업 완료'
  };
}
```

### 3단계: MCP 서버 도구 등록
`mcp-server/src/tools/` 디렉토리에 MCP 도구 구현:

```typescript
// mcp-server/src/tools/new-tool.ts
import { tool } from 'fastmcp';
import { NewToolSchema } from '@/schemas/new-tool';
import { executeNewTool } from '@/core/tools/new-tool';

export const newTool = tool({
  name: 'new_tool',
  description: '새로운 도구 설명',
  inputSchema: NewToolSchema,
  handler: async (input) => {
    const result = await executeNewTool(input);
    return result;
  }
});
```

### 4단계: CLI 명령어 추가
`src/cli/commands/` 디렉토리에 CLI 명령어 구현:

```typescript
// src/cli/commands/new-tool.ts
import { Command } from 'commander';
import { executeNewTool } from '@/core/tools/new-tool';

export function createNewToolCommand(): Command {
  return new Command('new-tool')
    .description('새로운 도구 실행')
    .argument('<input>', '입력값')
    .option('--flag', '옵션 플래그')
    .action(async (input, options) => {
      const result = await executeNewTool({ input, options });
      console.log(result);
    });
}
```

### 5단계: 등록 및 내보내기
각 인덱스 파일에 새로운 도구 등록:

```typescript
// src/schemas/index.ts
export * from './new-tool';

// src/core/tools/index.ts
export * from './new-tool';

// mcp-server/src/tools/index.ts
export { newTool } from './new-tool';

// src/cli/index.ts
import { createNewToolCommand } from './commands/new-tool';
program.addCommand(createNewToolCommand());
```

## 테스트 작성

### 단위 테스트
```typescript
// tests/unit/new-tool.test.ts
import { describe, it, expect } from 'vitest';
import { executeNewTool } from '@/core/tools/new-tool';

describe('NewTool', () => {
  it('should execute successfully', async () => {
    const result = await executeNewTool({ input: 'test' });
    expect(result.success).toBe(true);
  });
});
```

### E2E 테스트
```typescript
// tests/e2e/new-tool.spec.ts
import { test, expect } from '@playwright/test';

test('new-tool command works', async ({ page }) => {
  // E2E 테스트 구현
});
```

## 문서 업데이트

### README.md 업데이트
- 새로운 도구 사용법 추가
- 예제 코드 포함
- 환경 변수 요구사항 명시

### 타입 정의 업데이트
필요시 `src/types/` 디렉토리에 공통 타입 정의 추가

## 체크리스트

- [ ] 스키마 정의 완료
- [ ] 비즈니스 로직 구현 완료
- [ ] MCP 도구 등록 완료
- [ ] CLI 명령어 추가 완료
- [ ] 모든 인덱스 파일 업데이트
- [ ] 단위 테스트 작성 완료
- [ ] E2E 테스트 작성 완료
- [ ] 문서 업데이트 완료
- [ ] 린트 및 포맷 검사 통과
- [ ] 빌드 테스트 통과
