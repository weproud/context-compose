---
description:
globs:
alwaysApply: false
---
# 아키텍처 패턴 및 코딩 가이드라인

## 공유 비즈니스 로직 패턴

### 핵심 원칙
이 프로젝트는 CLI와 MCP 서버 간에 동일한 비즈니스 로직을 공유하는 DRY 패턴을 사용합니다.

### 구조 패턴
```
src/core/tools/           # 공유 비즈니스 로직
├── init.ts              # 프로젝트 초기화 로직
├── slack.ts             # Slack 메시징 로직
├── discord.ts           # Discord 메시징 로직
└── index.ts             # 모든 도구 로직 내보내기
```

### 스키마 검증 패턴
- 모든 입력은 Zod 스키마로 검증
- 스키마 정의: `src/schemas/` 디렉토리
- 타입 안전성 보장

## 코딩 가이드라인

### TypeScript 사용법
- 엄격한 타입 검사 활성화
- `any` 타입 사용 금지
- 인터페이스보다 타입 별칭 선호
- 제네릭 활용으로 재사용성 증대

### 에러 처리
- 모든 비동기 함수에서 적절한 에러 처리
- 사용자 친화적인 에러 메시지 제공
- 로깅을 통한 디버깅 정보 제공

### 모듈 구조
- 각 도구는 독립적인 모듈로 구성
- 순환 의존성 방지
- 명확한 인터페이스 정의

### 테스트 작성 원칙
- 각 비즈니스 로직에 대한 단위 테스트 필수
- E2E 테스트로 전체 워크플로우 검증
- 모킹을 통한 외부 의존성 격리

## MCP 서버 특화 패턴

### 도구 등록
- FastMCP 프레임워크 사용
- 각 도구는 별도 파일로 분리
- [mcp-server/src/tools/index.ts](mdc:mcp-server/src/tools/index.ts)에서 중앙 등록

### CLI 패턴
- Commander.js 기반 명령어 구조
- 각 명령어는 별도 파일로 분리
- 공유 로직 재사용으로 일관성 보장
