name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Biome checks
        run: pnpm run check

      - name: Run TypeScript type check
        run: pnpm run type-check

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run smoke tests
        run: pnpm run test:smoke

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test:unit

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [smoke-tests, unit-tests]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Run integration tests
        run: pnpm run test:integration

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [smoke-tests, unit-tests]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run E2E tests
        run: pnpm run test:e2e

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [code-quality, smoke-tests, unit-tests, integration-tests, e2e-tests]
    if: always()
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate test coverage
        run: pnpm run test:coverage
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Test Results Summary
        run: |
          echo "## 🧪 테스트 결과 요약" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 테스트 스위트 상태" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 코드 품질 검사: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔥 Smoke 테스트: ${{ needs.smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧩 단위 테스트: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 통합 테스트: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 E2E 테스트: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### CLI 및 MCP 도구 검증" >> $GITHUB_STEP_SUMMARY
          echo "모든 테스트가 통과하면 CLI와 MCP 도구가 정상적으로 동작합니다." >> $GITHUB_STEP_SUMMARY

      - name: Check overall test status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" &&
                "${{ needs.smoke-tests.result }}" == "success" &&
                "${{ needs.unit-tests.result }}" == "success" &&
                "${{ needs.integration-tests.result }}" == "success" &&
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "🎉 모든 테스트가 성공했습니다!"
            echo "✅ CLI와 MCP 도구가 정상적으로 동작합니다."
          else
            echo "❌ 일부 테스트가 실패했습니다."
            echo "🔧 실패한 테스트를 확인하고 수정해주세요."
            exit 1
          fi
