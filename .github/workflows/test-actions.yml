name: Test Actions

on:
  push:
    branches: [main, develop]
    paths:
      - '.taskaction/actions/**'
      - 'assets/actions/**'
      - 'tests/actions/**'
      - 'tests/integration/**'
      - 'scripts/test-actions.ts'
  pull_request:
    branches: [main, develop]
    paths:
      - '.taskaction/actions/**'
      - 'assets/actions/**'
      - 'tests/actions/**'
      - 'tests/integration/**'
      - 'scripts/test-actions.ts'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode to run'
        required: true
        default: 'mock'
        type: choice
        options:
          - mock
          - integration
          - e2e
      specific_action:
        description: 'Specific action to test (optional)'
        required: false
        type: string

jobs:
  test-actions-mock:
    name: Test Actions (Mock Mode)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Initialize task-action
        run: npm run task-action init

      - name: Run mock tests for all actions
        run: npm run test:actions:mock

      - name: Generate HTML report
        run: npm run test:actions:html

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: action-test-results-mock
          path: test-results-*.html
          retention-days: 30

  test-actions-integration:
    name: Test Actions (Integration Mode)
    runs-on: ubuntu-latest
    needs: test-actions-mock

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Initialize task-action
        run: npm run task-action init

      - name: Start MCP server in background
        run: |
          npm run start:server &
          sleep 5

      - name: Run integration tests
        run: npm run test:actions:integration

      - name: Stop MCP server
        run: pkill -f "mcp-server" || true

  test-specific-actions:
    name: Test Specific Actions
    runs-on: ubuntu-latest
    if: github.event.inputs.specific_action != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Initialize task-action
        run: npm run task-action init

      - name: Test specific action
        run: |
          npx tsx scripts/test-actions.ts single ${{ github.event.inputs.specific_action }} \
            --mode ${{ github.event.inputs.test_mode || 'mock' }} \
            --verbose \
            --output html

  test-actions-e2e:
    name: Test Actions (E2E Mode)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_mode == 'e2e'
    environment: e2e-testing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Initialize task-action
        run: npm run task-action init

      - name: Run E2E tests with real services
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.TEST_SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.TEST_DISCORD_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run test:actions:e2e

  test-action-types:
    name: Test Actions by Type
    runs-on: ubuntu-latest
    strategy:
      matrix:
        action_type: [git, message, development]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Initialize task-action
        run: npm run task-action init

      - name: Test ${{ matrix.action_type }} actions
        run: |
          npx tsx scripts/test-actions.ts type ${{ matrix.action_type }} \
            --mode mock \
            --verbose

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Initialize task-action
        run: npm run task-action init

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          time npm run test:actions:mock

      - name: Check test execution time
        run: |
          # Performance criteria: All action tests must complete within 60 seconds
          timeout 60s npm run test:actions:mock || {
            echo "❌ Performance test failed: Tests took longer than 60 seconds"
            exit 1
          }
          echo "✅ Performance test passed: Tests completed within 60 seconds"

  validate-test-coverage:
    name: Validate Test Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Initialize task-action
        run: npm run task-action init

      - name: Check action test coverage
        run: |
          echo "Checking test coverage for actions..."

          # Check all YAML files in .taskaction/actions directory
          action_files=$(find .taskaction/actions -name "*.yaml" -o -name "*.yml" | wc -l)
          test_files=$(find tests/actions -name "*.test.ts" | wc -l)

          echo "Action files: $action_files"
          echo "Test files: $test_files"

          if [ $test_files -lt $action_files ]; then
            echo "⚠️ Warning: Not all actions have corresponding test files"
            echo "Missing tests for some actions. Consider adding more test coverage."
          else
            echo "✅ Good test coverage: All actions have test files"
          fi
