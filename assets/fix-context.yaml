version: 1
kind: task
name: 'bug-fix'
description: 'Context for fixing bugs with systematic debugging and testing'

context:
  workflow: workflows/workflow.yaml
  roles:
- personas/linus-torvalds.yaml
- personas/john-carmack.yaml
  rules:
    - rules/the-must-follow.yaml
    - rules/clean-code.yaml
    - rules/error-handling.yaml
    - rules/testing-principles.yaml
    - rules/development.yaml
  mcps:
    - mcps/sequential-thinking.yaml
    - mcps/context7.yaml
    - mcps/web-search.yaml
    - mcps/github-api.yaml
  notify:
    - notify/slack.yaml
prompt: |
  Fix bugs through systematic analysis and root cause resolution.
  Implement preventive measures to ensure issues don't recur.
  Focus on minimal changes while maintaining system stability.
  Prioritize thorough testing and verification of fixes with comprehensive documentation.
enhanced-prompt: |-
  # Bug Fix Context

  ## Bug Fix Philosophy
  Fix bugs through **systematic analysis** and **root cause resolution**, implementing preventive measures to ensure issues do not recur.

  ## Bug Fix Process
  1. **Problem Reproduction & Analysis**:
     - Document bug reproduction steps
     - Analyze error logs and stack traces
     - Assess impact scope and severity
     - Investigate related code and dependencies

  2. **Root Cause Analysis**:
     - Detailed analysis using debugging tools
     - Trace code flow and verify states
     - Review data flow and transformation processes
     - Check external dependencies and environmental factors

  3. **Fix Strategy Design**:
     - Prioritize minimally invasive fix approaches
     - Assess side effects and risks
     - Compare and review alternative solutions
     - Establish testing strategy

  4. **Implementation & Verification**:
     - Implement targeted fix
     - Write and execute regression tests
     - Add edge case tests
     - Verify performance impact

  ## Debugging Strategy
  - **Log Analysis**: Comprehensive analysis of error logs and system logs
  - **Step-by-step Tracing**: Trace code execution path systematically
  - **State Verification**: Check variable and object states at each step
  - **Isolation Testing**: Isolate problem areas for independent testing

  ## Fix Considerations
  - **Minimal Change Principle**: Perform only minimum changes necessary
  - **Side Effect Prevention**: Ensure no impact on other functionality
  - **Performance Impact**: Minimize performance impact of the fix
  - **Documentation**: Clearly document fix content and reasoning

  ## Testing Strategy
  1. **Regression Testing**: Verify existing functionality works correctly
  2. **Bug Reproduction Testing**: Confirm bug reproduces before fix and is resolved after
  3. **Edge Case Testing**: Test boundary values and exception scenarios

  ## Success Criteria
  - ✅ Bug completely resolved
  - ✅ All regression tests pass
  - ✅ No performance impact or improved performance
  - ✅ Root cause eliminated
  - ✅ Preventive measures implemented
  - ✅ Documentation completed

  **Ready to start bug fixing. What bug would you like to fix?**
