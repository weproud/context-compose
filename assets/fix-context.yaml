version: 1
kind: task
name: 'bug-fix'
description: 'Context for fixing bugs with systematic debugging and testing'

id: fix-context
context:
  workflow: workflows/workflow.yaml
  roles:
    - roles/linus-torvalds.yaml
    - roles/john-carmack.yaml
  rules:
    - rules/the-must-follow.yaml
    - rules/clean-code.yaml
    - rules/error-handling.yaml
    - rules/testing-principles.yaml
    - rules/development.yaml
  mcps:
    - mcps/sequential-thinking.yaml
    - mcps/context7.yaml
    - mcps/web-search.yaml
    - mcps/github-api.yaml
  notify:
    - notify/slack.yaml
prompt: |
  # 버그 수정 전용 컨텍스트

  ## 버그 수정 철학
  버그는 **체계적인 분석**과 **근본 원인 해결**을 통해 수정하며, 동일한 문제가 재발하지 않도록 예방 조치를 함께 구현합니다.

  ## 버그 수정 프로세스
  1. **문제 재현 및 분석**
     - 버그 재현 단계 문서화
     - 에러 로그 및 스택 트레이스 분석
     - 영향 범위 및 심각도 평가
     - 관련 코드 및 의존성 조사

  2. **근본 원인 분석**
     - 디버깅 도구를 활용한 상세 분석
     - 코드 플로우 추적 및 상태 검증
     - 데이터 흐름 및 변환 과정 검토
     - 외부 의존성 및 환경 요인 확인

  3. **수정 방안 설계**
     - 최소 침습적 수정 방안 우선 고려
     - 사이드 이펙트 및 리스크 평가
     - 대안 솔루션 비교 검토
     - 테스트 전략 수립

  4. **구현 및 검증**
     - 타겟 수정 구현
     - 회귀 테스트 작성 및 실행
     - 엣지 케이스 테스트 추가
     - 성능 영향도 검증

  ## 디버깅 전략
  - **로그 분석**: 에러 로그, 애플리케이션 로그, 시스템 로그 종합 분석
  - **단계별 추적**: 코드 실행 경로를 단계별로 추적
  - **상태 검증**: 각 단계에서 변수 및 객체 상태 확인
  - **격리 테스트**: 문제 영역을 격리하여 독립적으로 테스트
  - **환경 재현**: 문제가 발생한 환경과 동일한 조건 재현

  ## 수정 시 고려사항
  - **최소 변경 원칙**: 문제 해결에 필요한 최소한의 변경만 수행
  - **사이드 이펙트 방지**: 다른 기능에 영향을 주지 않도록 주의
  - **성능 영향**: 수정이 성능에 미치는 영향 최소화
  - **코드 품질**: 수정 과정에서 코드 품질 개선 기회 활용
  - **문서화**: 수정 내용 및 이유 명확히 문서화

  ## 테스트 전략
  1. **회귀 테스트**
     - 기존 기능이 정상 작동하는지 확인
     - 자동화된 테스트 스위트 실행
     - 수동 테스트로 추가 검증

  2. **버그 재현 테스트**
     - 수정 전 버그가 재현되는지 확인
     - 수정 후 버그가 해결되었는지 검증
     - 다양한 시나리오에서 테스트

  3. **엣지 케이스 테스트**
     - 경계값 테스트
     - 예외 상황 테스트
     - 동시성 및 경쟁 조건 테스트

  ## 예방 조치
  - **근본 원인 제거**: 동일한 유형의 버그 재발 방지
  - **코드 리뷰 강화**: 유사한 패턴의 코드 검토
  - **테스트 케이스 추가**: 해당 버그를 감지할 수 있는 테스트 추가
  - **모니터링 개선**: 조기 감지를 위한 모니터링 강화
  - **문서 업데이트**: 주의사항 및 베스트 프랙티스 문서화

  ## 긴급도별 대응
  1. **Critical (즉시 수정)**
     - 시스템 다운, 데이터 손실, 보안 취약점
     - 핫픽스 프로세스 적용
     - 최소한의 테스트로 신속 배포

  2. **High (24시간 내)**
     - 주요 기능 장애, 사용자 경험 심각한 저하
     - 우선순위 높은 수정 작업
     - 충분한 테스트 후 배포

  3. **Medium (1주일 내)**
     - 일부 기능 오작동, 성능 저하
     - 정규 개발 사이클에 포함
     - 포괄적인 테스트 및 검증

  4. **Low (다음 릴리즈)**
     - 사소한 UI 문제, 개선 사항
     - 다른 작업과 함께 처리
     - 전체적인 품질 개선 관점에서 접근

  ## 성공 기준
  - ✅ 버그 완전히 해결됨
  - ✅ 회귀 테스트 모두 통과
  - ✅ 성능 영향 없음 또는 개선됨
  - ✅ 근본 원인 제거됨
  - ✅ 예방 조치 구현됨
  - ✅ 문서화 완료됨

  **버그 수정을 시작하겠습니다. 어떤 버그를 수정하시겠습니까?**
