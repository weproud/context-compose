version: 1
kind: task
name: 'refactoring'
description: 'Context for code refactoring with safety and quality improvement focus'

context:
  workflow: workflows/workflow.yaml
  roles:
    - roles/martin-fowler.yaml
    - roles/uncle-bob.yaml
  rules:
    - rules/the-must-follow.yaml
    - rules/clean-code.yaml
    - rules/solid-principles.yaml
    - rules/refactoring.yaml
    - rules/testing-principles.yaml
    - rules/performance-guidelines.yaml
  mcps:
    - mcps/sequential-thinking.yaml
    - mcps/context7.yaml
  notify:
    - notify/slack.yaml
prompt: |
  # Refactoring Context

  ## Refactoring Philosophy
  Refactoring is the work of **improving code structure without changing functionality** to enhance readability, maintainability, and extensibility. Prioritize **safety** and proceed through **incremental improvement**.

  ## Refactoring Principles
  1. **Preserve Functionality**: Do not change external behavior
  2. **Incremental Improvement**: Proceed safely in small units
  3. **Test First**: Start after securing sufficient test coverage
  4. **Measurable**: Quantitatively measure improvement effects
  5. **Documentation**: Clearly record changes and reasons

  ## Refactoring Process
  1. **Current State Analysis**
     - Measure code quality metrics
     - Identify technical debt and set priorities
     - Check test coverage
     - Establish performance benchmarks

  2. **Refactoring Plan Development**
     - Set goals and define success criteria
     - Determine refactoring scope and order
     - Risk assessment and mitigation measures
     - Establish rollback plans

  3. **Safety Net Construction**
     - Write comprehensive test suites
     - Set up automated regression testing
     - Configure performance monitoring tools
     - Verify backup and version control

  4. **Incremental Refactoring Execution**
     - Proceed in small units
     - Run tests at each step
     - Continuous integration and verification
     - Immediate rollback when problems occur

  ## Refactoring Patterns
  1. **Extract Method**
     ```typescript
     // Before
     function processOrder(order: Order) {
       // Complex logic...
       const total = order.items.reduce((sum, item) => {
         return sum + (item.price * item.quantity * (1 - item.discount));
       }, 0);
       // More logic...
     }

     // After
     function processOrder(order: Order) {
       const total = calculateOrderTotal(order);
       // Other logic...
     }

     function calculateOrderTotal(order: Order): number {
       return order.items.reduce((sum, item) => {
         return sum + calculateItemTotal(item);
       }, 0);
     }
     ```

  2. **Extract Class**
     - When a single class has too many responsibilities
     - Separate related data and methods into a new class
     - Follow Single Responsibility Principle

  3. **Simplify Conditionals**
     ```typescript
     // Before
     if (user.type === 'premium' && user.subscriptionActive && user.paymentValid) {
       // Premium logic
     }

     // After
     if (user.isPremiumActive()) {
       // Premium logic
     }
     ```

  ## Code Quality Improvement Areas
  1. **Readability Enhancement**
     - Use meaningful variable and function names
     - Simplify complex conditionals
     - Remove duplicate code
     - Appropriate comments and documentation

  2. **Structure Improvement**
     - Optimize function and class sizes
     - Improve dependency management
     - Layer separation and separation of concerns
     - Apply design patterns

  3. **Performance Optimization**
     - Improve algorithm efficiency
     - Optimize memory usage
     - Remove unnecessary operations
     - Apply caching strategies

  ## Refactoring Tool Utilization
  1. **Static Analysis Tools**
     - Measure code quality with ESLint, SonarQube
     - Complexity metrics (Cyclomatic Complexity)
     - Duplicate code detection
     - Dependency analysis

  2. **Automation Tools**
     - Utilize IDE refactoring features
     - Automated code transformation tools
     - Test automation and CI/CD integration
     - Performance monitoring tools

  ## Refactoring Precautions
  - **Avoid Over-refactoring**: Don't make it more complex than necessary
  - **No Feature Changes**: Don't add new features during refactoring
  - **Test First**: Don't proceed with refactoring without tests
  - **Incremental Progress**: Avoid too many changes at once
  - **Team Communication**: Share refactoring plans and progress

  ## Performance Measurement
  1. **Quantitative Metrics**
     - Code complexity reduction
     - Test coverage improvement
     - Build time reduction
     - Performance improvement metrics

  2. **Qualitative Metrics**
     - Code readability improvement
     - Development productivity increase
     - Bug occurrence rate reduction
     - Team satisfaction improvement

  ## Success Criteria
  - ✅ All existing tests pass
  - ✅ Code quality metrics improved
  - ✅ No performance degradation or improved performance
  - ✅ Readability and maintainability improved
  - ✅ Technical debt reduced
  - ✅ Team review and approval completed

  **Ready to start refactoring. What code would you like to refactor?**
