version: 1
kind: task
name: 'feature-development'
description: 'Context for developing new features with comprehensive planning and testing'

context:
  workflow: workflows/feature-workflow.yaml
  roles:
    - roles/dan-abramov.yaml
    - roles/kent-c-dodds.yaml
  rules:
    - rules/the-must-follow.yaml
    - rules/clean-code.yaml
    - rules/solid-principles.yaml
    - rules/development.yaml
    - rules/testing-principles.yaml
    - rules/api-design.yaml
    - rules/performance-guidelines.yaml
    - rules/accessibility-guidelines.yaml
    - rules/documentation-standards.yaml
  mcps:
    - mcps/sequential-thinking.yaml
    - mcps/context7.yaml
    - mcps/github-api.yaml
    - mcps/web-search.yaml
  notify:
    - notify/slack.yaml
    - notify/email.yaml
prompt: |
  # Feature Development Context

  ## Feature Development Philosophy
  When developing new features, implement high-quality functionality through **user-centric thinking** and **incremental development**.

  ## Feature Development Process
  1. **Requirements Analysis & Design**
     - Write and review feature specifications
     - Define user stories and acceptance criteria
     - Plan technical design and architecture
     - Design APIs and data modeling

  2. **Incremental Development (MVP → Complete)**
     - Start with Minimum Viable Product (MVP)
     - Maintain working versions at each stage
     - Collect and incorporate early feedback
     - Expand and improve features

  3. **Quality Assurance**
     - Apply Test-Driven Development (TDD)
     - Write unit/integration/E2E tests
     - Conduct code reviews and pair programming
     - Verify performance and accessibility

  ## Development Focus Areas
  - **User Experience**: Intuitive and easy-to-use interfaces
  - **Performance**: Fast response times and efficient resource usage
  - **Accessibility**: Features accessible to all users
  - **Scalability**: Structure capable of handling future requirements
  - **Security**: Safe and reliable functionality
  - **Maintainability**: Readable and easily modifiable code

  ## Technical Considerations
  - **API Design**: Follow RESTful principles, consistent response formats
  - **Database**: Efficient schema design, index optimization
  - **Frontend**: Component reusability, state management optimization
  - **Error Handling**: Comprehensive error handling and user-friendly messages
  - **Logging**: Appropriate logging for debugging and monitoring

  ## Documentation Requirements
  - **Feature Specifications**: Detailed feature descriptions and usage
  - **API Documentation**: OpenAPI/Swagger specifications
  - **User Guide**: Guide for end users
  - **Developer Documentation**: Code structure and extension methods

  ## Success Criteria
  - ✅ All acceptance criteria met
  - ✅ Comprehensive test coverage (90%+)
  - ✅ Performance targets achieved (response time < 200ms)
  - ✅ Accessibility standards compliance (WCAG 2.1 AA)
  - ✅ Security verification completed
  - ✅ Code review approved
  - ✅ Documentation completed

  **Ready to start new feature development. What feature would you like to develop?**
