version: 1
kind: action
name: Deploy
description: Safe deployment process with environment validation, health checks, and rollback capability
prompt: |
  Execute safe and reliable deployments with comprehensive validation and monitoring.

  This action performs complete deployment workflows including pre-deployment validation,
  environment configuration, progressive rollout, health checks, and automated rollback
  capabilities. It ensures zero-downtime deployments with proper monitoring and
  notification systems.

  Use this for production deployments, staging releases, or any environment where
  reliability is critical. The process includes security validation, performance
  monitoring, and team notifications to maintain deployment transparency.
enhanced-prompt: |-
  # 🚀 Deployment Workflow

  ## Core Steps

  **1. Pre-deployment Validation**
  ```bash
  # Environment setup
  ENVIRONMENT=${1:-staging}
  DEPLOY_VERSION=$(git rev-parse --short HEAD)

  # Validate branch for production
  if [ "$ENVIRONMENT" = "production" ]; then
    [ "$(git branch --show-current)" = "main" ] || { echo "❌ Production must be from main"; exit 1; }
  fi

  # Run tests
  npm test || { echo "❌ Tests failed"; exit 1; }
  ```

  **2. Build & Environment Setup**
  ```bash
  # Clean build
  rm -rf dist/ build/ .next/
  npm ci
  npm run build

  # Environment configuration
  ENV_FILE=".env.$ENVIRONMENT"
  [ -f "$ENV_FILE" ] && cp "$ENV_FILE" .env

  # Validate required env vars
  [ -z "$DATABASE_URL" ] && { echo "❌ Missing DATABASE_URL"; exit 1; }
  ```

  **3. Deployment Execution**
  ```bash
  # Create backup
  BACKUP_DIR="backups/deploy-$(date +%Y%m%d-%H%M%S)"
  mkdir -p "$BACKUP_DIR"
  [ -d "current" ] && cp -r current/ "$BACKUP_DIR/"

  # Deploy based on environment
  case "$ENVIRONMENT" in
    "staging") npm run deploy:staging ;;
    "production") npm run deploy:production ;;
    *) npm run deploy ;;
  esac
  ```

  **4. Health Checks & Validation**
  ```bash
  # Wait for deployment
  sleep 30

  # Health check
  HEALTH_URL="https://app-$ENVIRONMENT.com/health"
  for i in {1..5}; do
    if curl -f -s "$HEALTH_URL" > /dev/null; then
      echo "✅ Health check passed"
      break
    else
      echo "⚠️ Health check $i/5 failed, retrying..."
      sleep 10
      [ $i -eq 5 ] && { echo "❌ Health checks failed"; exit 1; }
    fi
  done

  echo "🚀 Deployment to $ENVIRONMENT successful!"
  ```

  **🎯 Result:** Safe deployment with validation, health checks, and rollback capability
