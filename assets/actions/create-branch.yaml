version: 1
kind: action
name: Create Branch
description: Create a new Git branch with proper naming conventions and best practices
prompt: |
  Create new Git branches with intelligent naming and proper workflow setup.

  This action creates well-named Git branches following team conventions with
  automatic name generation based on context. It handles uncommitted changes,
  updates base branches, and sets up proper tracking relationships with
  remote repositories.

  Use this when starting new features, bug fixes, or any development work
  that requires a separate branch. The process includes change management,
  branch naming optimization, and automated setup for immediate productivity.
enhanced-prompt: |-
  # 🌿 새 브랜치 생성

  ## 1단계: 현재 상태 확인
  ```bash
  echo "=== 브랜치 생성 시작 ==="

  # 현재 브랜치 확인
  CURRENT_BRANCH=$(git branch --show-current)
  echo "📍 현재 브랜치: $CURRENT_BRANCH"

  # 변경사항 확인
  if [ -n "$(git status --porcelain)" ]; then
    echo "⚠️ 커밋되지 않은 변경사항이 있습니다"
    echo "💾 변경사항을 스태시하거나 커밋하세요"
    git status --short
    exit 1
  fi
  ```

  ## 2단계: 브랜치 정보 입력
  ```bash
  # 브랜치 타입 선택
  echo "🔍 브랜치 타입을 선택하세요:"
  echo "1) feature (새 기능)"
  echo "2) bugfix (버그 수정)"
  echo "3) hotfix (긴급 수정)"
  echo "4) refactor (리팩토링)"
  echo "5) docs (문서화)"

  read -p "선택 (1-5): " BRANCH_TYPE_NUM

  case "$BRANCH_TYPE_NUM" in
    1) BRANCH_TYPE="feature" ;;
    2) BRANCH_TYPE="bugfix" ;;
    3) BRANCH_TYPE="hotfix" ;;
    4) BRANCH_TYPE="refactor" ;;
    5) BRANCH_TYPE="docs" ;;
    *) BRANCH_TYPE="feature" ;;
  esac

  # 브랜치 설명 입력
  echo "📝 브랜치 설명을 입력하세요:"
  read -p "> " BRANCH_DESC

  # 브랜치 이름 생성
  DATE_PREFIX=$(date +%m%d)
  CLEAN_DESC=$(echo "$BRANCH_DESC" | tr ' ' '-' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]//g')
  BRANCH_NAME="${BRANCH_TYPE}/${DATE_PREFIX}-${CLEAN_DESC}"

  echo "🌿 생성할 브랜치: $BRANCH_NAME"
  ```

  ## 3단계: 베이스 브랜치 업데이트
  ```bash
  # 메인 브랜치로 이동
  git checkout main
  echo "📍 main 브랜치로 이동"

  # 최신 상태로 업데이트
  echo "🔄 최신 변경사항 가져오기..."
  git pull origin main

  if [ $? -ne 0 ]; then
    echo "❌ 업데이트 실패 - 네트워크나 충돌 확인 필요"
    exit 1
  fi

  echo "✅ 베이스 브랜치 업데이트 완료"
  ```

  ## 4단계: 새 브랜치 생성
  ```bash
  # 새 브랜치 생성 및 이동
  echo "🌿 새 브랜치 생성 중..."
  git checkout -b "$BRANCH_NAME"

  if [ $? -eq 0 ]; then
    echo "✅ 브랜치 '$BRANCH_NAME' 생성 완료"
  else
    echo "❌ 브랜치 생성 실패"
    exit 1
  fi

  # 원격에 브랜치 생성
  echo "📤 원격 저장소에 브랜치 생성..."
  git push -u origin "$BRANCH_NAME"

  echo "🎉 브랜치 생성 및 설정 완료!"
  echo "📋 브랜치 정보:"
  echo "  - 이름: $BRANCH_NAME"
  echo "  - 타입: $BRANCH_TYPE"
  echo "  - 설명: $BRANCH_DESC"
  echo ""
  echo "🚀 이제 개발을 시작하세요!"
  ```

  **🎯 결과:** 개발 준비가 완료된 새 브랜치
