version: 1
kind: action
name: Git Commit
description: Commit changes to Git with conventional commit messages and best practices
prompt: Stage and commit changes using conventional commit format with clear, descriptive messages

enhanced-prompt: |-
  **Create a Git commit with proper conventional commit format and best practices.**

  ## Commit Process
  1. **Review Changes:**
     - Run `git status` to see modified files
     - Use `git diff` to review specific changes
     - Identify the scope and type of changes made

  2. **Stage Changes:**
     - Stage specific files: `git add <file>`
     - Stage all changes: `git add .`
     - Use `git add -p` for selective staging of hunks

  3. **Write Commit Message:**
     - Follow conventional commit format
     - Keep first line under 50 characters
     - Add detailed description if needed

  ## Conventional Commit Format
  ```
  <type>(<scope>): <description>

  [optional body]

  [optional footer]
  ```

  **Common Types:**
  - `feat`: New feature
  - `fix`: Bug fix
  - `docs`: Documentation changes
  - `style`: Code style changes (formatting, semicolons)
  - `refactor`: Code refactoring without changing functionality
  - `test`: Adding or updating tests
  - `chore`: Maintenance tasks, dependency updates

  **Examples:**
  - `feat(auth): add user login functionality`
  - `fix(api): resolve null pointer exception in user service`
  - `docs(readme): update installation instructions`
  - `refactor(utils): simplify string validation logic`

  ## Best Practices
  - **Be Specific**: Describe what was changed and why
  - **Use Imperative Mood**: "add feature" not "added feature"
  - **Reference Issues**: Include issue numbers when relevant
  - **Keep Focused**: One logical change per commit

  ## Execution Steps
  1. Review all changes with `git diff`
  2. Stage appropriate files
  3. Write clear commit message following format
  4. Commit with `git commit -m "message"` or `git commit` for editor
