version: 1
kind: action
name: Security Check
description: Basic security audit and vulnerability scanning
prompt: |
  Perform basic security checks including dependency scanning and common vulnerabilities.

  This action scans for known vulnerabilities in dependencies, checks for
  common security issues in code, and validates basic security configurations.
  It provides actionable recommendations for improving security.

  Use this when you need to identify security issues or ensure basic
  security best practices are followed in your project.
enhanced-prompt: |-
  # üîí Î≥¥Ïïà Ï≤¥ÌÅ¨

  ## 1Îã®Í≥Ñ: ÏùòÏ°¥ÏÑ± Ï∑®ÏïΩÏ†ê Ïä§Ï∫î
  ```bash
  echo "=== Î≥¥Ïïà Ï≤¥ÌÅ¨ ÏãúÏûë ==="

  PROJECT_NAME=$(basename $(pwd))
  echo "üîí ÌîÑÎ°úÏ†ùÌä∏: $PROJECT_NAME"

  # npm Î≥¥Ïïà Í∞êÏÇ¨
  if [ -f "package.json" ]; then
    echo "üì¶ npm Î≥¥Ïïà Í∞êÏÇ¨ Ïã§Ìñâ Ï§ë..."
    
    # npm audit Ïã§Ìñâ
    npm audit > npm-audit-report.txt 2>/dev/null || echo "Î≥¥Ïïà Í∞êÏÇ¨ Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù"
    
    # Ï∑®ÏïΩÏ†ê Í∞úÏàò ÌôïÏù∏
    CRITICAL=$(npm audit --json 2>/dev/null | grep -o '"critical":[0-9]*' | cut -d: -f2 || echo "0")
    HIGH=$(npm audit --json 2>/dev/null | grep -o '"high":[0-9]*' | cut -d: -f2 || echo "0")
    
    echo "üö® Ïã¨Í∞ÅÌïú Ï∑®ÏïΩÏ†ê: ${CRITICAL}Í∞ú"
    echo "‚ö†Ô∏è ÎÜíÏùÄ ÏúÑÌóò Ï∑®ÏïΩÏ†ê: ${HIGH}Í∞ú"
    
    if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
      echo "üîß ÏàòÏ†ï Î∞©Î≤ï: npm audit fix Ïã§Ìñâ"
    else
      echo "‚úÖ Ïã¨Í∞ÅÌïú Ï∑®ÏïΩÏ†ê ÏóÜÏùå"
    fi
  fi
  ```

  ## 2Îã®Í≥Ñ: ÏΩîÎìú Î≥¥Ïïà Ìå®ÌÑ¥ Í≤ÄÏÇ¨
  ```bash
  echo "üîç ÏΩîÎìú Î≥¥Ïïà Ïù¥Ïäà Í≤ÄÏÇ¨..."

  # ÌïòÎìúÏΩîÎî©Îêú ÎπÑÎ∞ÄÎ≤àÌò∏/ÌÇ§ Í≤ÄÏÇ¨
  echo "üîë ÌïòÎìúÏΩîÎî©Îêú ÎπÑÎ∞ÄÏ†ïÎ≥¥ Í≤ÄÏÇ¨:"
  SECRET_COUNT=$(grep -r -i "password.*=\|secret.*=\|key.*=\|token.*=" --include="*.js" --include="*.ts" src/ 2>/dev/null | wc -l)
  echo "  - ÏùòÏã¨Ïä§Îü¨Ïö¥ Ìå®ÌÑ¥: ${SECRET_COUNT}Í∞ú"

  # SQL Ïù∏Ï†ùÏÖò Ìå®ÌÑ¥ Í≤ÄÏÇ¨
  echo "üíâ SQL Ïù∏Ï†ùÏÖò Ìå®ÌÑ¥ Í≤ÄÏÇ¨:"
  SQL_COUNT=$(grep -r "SELECT.*+\|INSERT.*+\|UPDATE.*+" --include="*.js" --include="*.ts" src/ 2>/dev/null | wc -l)
  echo "  - ÏúÑÌóòÌïú SQL Ìå®ÌÑ¥: ${SQL_COUNT}Í∞ú"

  # XSS Ï∑®ÏïΩÏ†ê Ìå®ÌÑ¥ Í≤ÄÏÇ¨
  echo "üåê XSS Ï∑®ÏïΩÏ†ê Ìå®ÌÑ¥ Í≤ÄÏÇ¨:"
  XSS_COUNT=$(grep -r "innerHTML\|document.write\|eval(" --include="*.js" --include="*.ts" src/ 2>/dev/null | wc -l)
  echo "  - ÏúÑÌóòÌïú DOM Ï°∞Ïûë: ${XSS_COUNT}Í∞ú"

  # HTTP ÏÇ¨Ïö© Í≤ÄÏÇ¨
  echo "üîì ÎπÑÎ≥¥Ïïà HTTP ÏÇ¨Ïö© Í≤ÄÏÇ¨:"
  HTTP_COUNT=$(grep -r "http://" --include="*.js" --include="*.ts" --include="*.json" . 2>/dev/null | grep -v node_modules | wc -l)
  echo "  - HTTP ÏÇ¨Ïö©: ${HTTP_COUNT}Í∞ú (HTTPS Í∂åÏû•)"
  ```

  ## 3Îã®Í≥Ñ: ÌôòÍ≤Ω ÏÑ§Ï†ï Î≥¥Ïïà Í≤ÄÏÇ¨
  ```bash
  echo "‚öôÔ∏è ÌôòÍ≤Ω ÏÑ§Ï†ï Î≥¥Ïïà Í≤ÄÏÇ¨..."

  # .env ÌååÏùº Î≥¥Ïïà
  if [ -f ".env" ]; then
    echo "‚ö†Ô∏è .env ÌååÏùº Î∞úÍ≤¨"
    if grep -q "\.env" .gitignore 2>/dev/null; then
      echo "‚úÖ .envÍ∞Ä .gitignoreÏóê Ìè¨Ìï®Îê®"
    else
      echo "‚ùå .envÍ∞Ä .gitignoreÏóê ÏóÜÏùå - Ï∂îÍ∞Ä ÌïÑÏöî!"
    fi
  else
    echo "‚ÑπÔ∏è .env ÌååÏùº ÏóÜÏùå"
  fi

  # package.json Ïä§ÌÅ¨Î¶ΩÌä∏ Î≥¥Ïïà
  if [ -f "package.json" ]; then
    echo "üì¶ package.json Î≥¥Ïïà Í≤ÄÏÇ¨:"
    
    # sudo ÏÇ¨Ïö© Í≤ÄÏÇ¨
    if grep -q "sudo" package.json; then
      echo "‚ö†Ô∏è Ïä§ÌÅ¨Î¶ΩÌä∏ÏóêÏÑú sudo ÏÇ¨Ïö© Î∞úÍ≤¨"
    else
      echo "‚úÖ sudo ÏÇ¨Ïö© ÏóÜÏùå"
    fi
    
    # postinstall Ïä§ÌÅ¨Î¶ΩÌä∏ Í≤ÄÏÇ¨
    if grep -q "postinstall" package.json; then
      echo "‚ö†Ô∏è postinstall Ïä§ÌÅ¨Î¶ΩÌä∏ Î∞úÍ≤¨ - Í≤ÄÌÜ† ÌïÑÏöî"
    else
      echo "‚úÖ postinstall Ïä§ÌÅ¨Î¶ΩÌä∏ ÏóÜÏùå"
    fi
  fi

  # Dockerfile Î≥¥Ïïà (ÏûàÎäî Í≤ΩÏö∞)
  if [ -f "Dockerfile" ]; then
    echo "üê≥ Docker Î≥¥Ïïà Í≤ÄÏÇ¨:"
    
    if grep -q "USER" Dockerfile; then
      echo "‚úÖ ÎπÑÎ£®Ìä∏ ÏÇ¨Ïö©Ïûê ÏßÄÏ†ïÎê®"
    else
      echo "‚ö†Ô∏è Î£®Ìä∏ ÏÇ¨Ïö©ÏûêÎ°ú Ïã§Ìñâ - ÎπÑÎ£®Ìä∏ ÏÇ¨Ïö©Ïûê Í∂åÏû•"
    fi
  fi
  ```

  ## 4Îã®Í≥Ñ: Î≥¥Ïïà ÎØ∏Îì§Ïõ®Ïñ¥ Í≤ÄÏÇ¨
  ```bash
  if [ -f "package.json" ]; then
    echo "üõ°Ô∏è Î≥¥Ïïà ÎØ∏Îì§Ïõ®Ïñ¥ Í≤ÄÏÇ¨:"
    
    # Helmet.js Í≤ÄÏÇ¨
    if grep -q "helmet" package.json; then
      echo "‚úÖ Helmet.js Î≥¥Ïïà Ìó§Îçî ÏÑ§Ï†ïÎê®"
    else
      echo "‚ö†Ô∏è Helmet.js ÎØ∏ÏÑ§Ïπò - Î≥¥Ïïà Ìó§Îçî Í∂åÏû•"
    fi
    
    # CORS ÏÑ§Ï†ï Í≤ÄÏÇ¨
    if grep -q "cors" package.json; then
      echo "‚úÖ CORS ÏÑ§Ï†ï Ìå®ÌÇ§ÏßÄ ÏûàÏùå"
    else
      echo "‚ö†Ô∏è CORS ÏÑ§Ï†ï ÌïÑÏöî"
    fi
    
    # Rate limiting Í≤ÄÏÇ¨
    if grep -q "rate-limit\|express-rate-limit" package.json; then
      echo "‚úÖ Rate limiting ÏÑ§Ï†ïÎê®"
    else
      echo "‚ö†Ô∏è Rate limiting ÎØ∏ÏÑ§Ï†ï - DDoS Î∞©Ïñ¥ Í∂åÏû•"
    fi
  fi
  ```

  ## 5Îã®Í≥Ñ: Î≥¥Ïïà Í∂åÏû•ÏÇ¨Ìï≠
  ```bash
  echo "üí° Î≥¥Ïïà Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠:"
  echo ""
  echo "üîê Ïù∏Ï¶ù Î∞è Í∂åÌïú:"
  echo "  - Í∞ïÎ†•Ìïú ÎπÑÎ∞ÄÎ≤àÌò∏ Ï†ïÏ±Ö Ï†ÅÏö©"
  echo "  - JWT ÌÜ†ÌÅ∞ Î≥¥Ïïà ÏÑ§Ï†ï"
  echo "  - 2FA (Ïù¥Ï§ë Ïù∏Ï¶ù) Íµ¨ÌòÑ"
  echo ""
  echo "üõ°Ô∏è Ïõπ Î≥¥Ïïà:"
  echo "  - HTTPS Í∞ïÏ†ú ÏÇ¨Ïö©"
  echo "  - CSP (Content Security Policy) ÏÑ§Ï†ï"
  echo "  - Î≥¥Ïïà Ìó§Îçî Ï∂îÍ∞Ä (Helmet.js)"
  echo ""
  echo "üì¶ ÏùòÏ°¥ÏÑ± Î≥¥Ïïà:"
  echo "  - Ï†ïÍ∏∞Ï†ÅÏù∏ Î≥¥Ïïà ÏóÖÎç∞Ïù¥Ìä∏"
  echo "  - Ï∑®ÏïΩÏ†ê Ïä§Ï∫î ÏûêÎèôÌôî"
  echo "  - ÏµúÏÜå Í∂åÌïú ÏõêÏπô Ï†ÅÏö©"
  echo ""
  echo "üîç Î™®ÎãàÌÑ∞ÎßÅ:"
  echo "  - Î°úÍ∑∏ Î≥¥Ïïà Ïù¥Î≤§Ìä∏"
  echo "  - ÎπÑÏ†ïÏÉÅ Ï†ëÍ∑º ÌÉêÏßÄ"
  echo "  - Ï†ïÍ∏∞Ï†ÅÏù∏ Î≥¥Ïïà Í∞êÏÇ¨"
  echo ""
  echo "üéâ Î≥¥Ïïà Ï≤¥ÌÅ¨ ÏôÑÎ£å!"
  echo "üîí ÏãùÎ≥ÑÎêú Î≥¥Ïïà Ïù¥ÏäàÎ•º Ïö∞ÏÑ†ÏàúÏúÑÏóê Îî∞Îùº Ìï¥Í≤∞ÌïòÏÑ∏Ïöî."

  # Î≥¥Í≥†ÏÑú Ï†ïÎ¶¨
  if [ -f "npm-audit-report.txt" ]; then
    echo ""
    echo "üìÑ ÏÉÅÏÑ∏ Î≥¥Ïïà Î≥¥Í≥†ÏÑú: npm-audit-report.txt"
  fi
  ```

  **üéØ Í≤∞Í≥º:** Í∏∞Î≥∏ Î≥¥Ïïà Ïù¥Ïäà ÏãùÎ≥Ñ Î∞è Í∞úÏÑ† Î∞©Ìñ• Ï†úÏãú

  app.use(helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        scriptSrc: ["'self'"],
        imgSrc: ["'self'", "data:", "https:"],
      },
    },
    hsts: {
      maxAge: 31536000,
      includeSubDomains: true,
      preload: true
    }
  }));
  \`\`\`
  EOF

  echo "‚úÖ Web security headers check completed"
  echo ""
  ```

  ## üîê Step 6: Authentication & Authorization Review
  ```bash
  echo "=== Authentication & Authorization Review ==="

  echo "üîê Reviewing authentication implementation..."

  # Check for authentication libraries
  if [ -f "package.json" ]; then
    echo "üîç Checking authentication libraries..."
    
    # JWT libraries
    grep -q "jsonwebtoken\|jwt" package.json && echo "‚úÖ JWT library found" || echo "‚ÑπÔ∏è  No JWT library detected"
    
    # Passport.js
    grep -q "passport" package.json && echo "‚úÖ Passport.js found" || echo "‚ÑπÔ∏è  No Passport.js detected"
    
    # bcrypt for password hashing
    grep -q "bcrypt" package.json && echo "‚úÖ bcrypt found" || echo "‚ö†Ô∏è  Consider using bcrypt for password hashing"
  fi

  # Check for common auth vulnerabilities
  echo "üîç Checking for authentication vulnerabilities..."

  # Weak password validation
  grep -r "password.*length.*[1-5]" --include="*.js" --include="*.ts" . > "$AUDIT_DIR/weak-password-validation.txt" 2>/dev/null || true

  # Session management
  grep -r "session\|cookie" --include="*.js" --include="*.ts" . > "$AUDIT_DIR/session-usage.txt" 2>/dev/null || true

  # Create auth security checklist
  cat << EOF > "$AUDIT_DIR/auth-security-checklist.md"
  # Authentication & Authorization Security Checklist

  ## Password Security
  - [ ] Strong password requirements (min 8 chars, complexity)
  - [ ] Password hashing with bcrypt/scrypt/argon2
  - [ ] No password storage in plain text
  - [ ] Password reset functionality secure

  ## Session Management
  - [ ] Secure session configuration
  - [ ] Session timeout implemented
  - [ ] Session invalidation on logout
  - [ ] CSRF protection enabled

  ## JWT Security (if applicable)
  - [ ] Strong secret key
  - [ ] Appropriate expiration times
  - [ ] Refresh token rotation
  - [ ] Secure storage (httpOnly cookies)

  ## Authorization
  - [ ] Role-based access control (RBAC)
  - [ ] Principle of least privilege
  - [ ] Input validation and sanitization
  - [ ] API endpoint protection
  EOF

  echo "‚úÖ Authentication & authorization review completed"
  echo ""
  ```

  ## üìä Step 7: Generate Security Report
  ```bash
  echo "=== Security Report Generation ==="

  echo "üìä Generating comprehensive security report..."

  # Count issues
  SECRET_COUNT=$(wc -l < "$AUDIT_DIR/potential-secrets.txt" 2>/dev/null || echo "0")
  SQL_COUNT=$(wc -l < "$AUDIT_DIR/sql-injection-patterns.txt" 2>/dev/null || echo "0")
  XSS_COUNT=$(wc -l < "$AUDIT_DIR/xss-patterns.txt" 2>/dev/null || echo "0")
  HTTP_COUNT=$(wc -l < "$AUDIT_DIR/insecure-http.txt" 2>/dev/null || echo "0")

  # Generate main security report
  cat << EOF > "$AUDIT_DIR/security-report.md"
  # Security Audit Report

  **Project:** $PROJECT_NAME  
  **Audit Date:** $AUDIT_DATE  
  **Audit ID:** $AUDIT_ID

  ## Executive Summary

  This report contains the results of a comprehensive security audit performed on $PROJECT_NAME.

  ## Vulnerability Summary

  | Category | Count | Severity |
  |----------|-------|----------|
  | Critical Dependencies | $CRITICAL_VULNS | üö® Critical |
  | High Dependencies | $HIGH_VULNS | ‚ö†Ô∏è High |
  | Potential Secrets | $SECRET_COUNT | ‚ö†Ô∏è High |
  | SQL Injection Patterns | $SQL_COUNT | üö® Critical |
  | XSS Patterns | $XSS_COUNT | ‚ö†Ô∏è High |
  | Insecure HTTP | $HTTP_COUNT | ‚ö†Ô∏è Medium |

  ## Detailed Findings

  ### 1. Dependency Vulnerabilities
  - Critical: $CRITICAL_VULNS vulnerabilities found
  - High: $HIGH_VULNS vulnerabilities found
  - See: npm-audit.json for details

  ### 2. Code Security Issues
  - Potential secrets: $SECRET_COUNT instances
  - SQL injection patterns: $SQL_COUNT instances
  - XSS vulnerabilities: $XSS_COUNT instances
  - Insecure HTTP usage: $HTTP_COUNT instances

  ### 3. Configuration Security
  - Environment file protection: $([ -f ".env" ] && grep -q "\.env" .gitignore && echo "‚úÖ Protected" || echo "‚ùå Needs attention")
  - Docker security: $([ -f "Dockerfile" ] && echo "Reviewed" || echo "N/A")

  ## Recommendations

  ### Immediate Actions (Critical)
  1. Update dependencies with critical vulnerabilities
  2. Remove or secure hardcoded secrets
  3. Fix SQL injection vulnerabilities
  4. Implement input validation and sanitization

  ### Short-term Actions (High Priority)
  1. Add security headers middleware
  2. Implement rate limiting
  3. Review authentication implementation
  4. Add CSRF protection

  ### Long-term Actions (Medium Priority)
  1. Implement security monitoring
  2. Regular security audits
  3. Security training for development team
  4. Penetration testing

  ## Next Steps

  1. Address critical vulnerabilities immediately
  2. Create remediation plan for high-priority issues
  3. Implement security best practices
  4. Schedule regular security audits

  ---
  *Generated by task-action security audit*
  EOF

  echo "üìÑ Security report generated: $AUDIT_DIR/security-report.md"
  echo ""
  ```

  ## üö® Step 8: Critical Issues Alert
  ```bash
  echo "=== Critical Issues Alert ==="

  TOTAL_CRITICAL=$((CRITICAL_VULNS + SQL_COUNT))

  if [ $TOTAL_CRITICAL -gt 0 ]; then
    echo "üö® CRITICAL SECURITY ISSUES FOUND!"
    echo "   Critical dependency vulnerabilities: $CRITICAL_VULNS"
    echo "   SQL injection patterns: $SQL_COUNT"
    echo ""
    echo "‚ö†Ô∏è  IMMEDIATE ACTION REQUIRED:"
    echo "   1. Review security report: $AUDIT_DIR/security-report.md"
    echo "   2. Address critical vulnerabilities"
    echo "   3. Do not deploy until issues are resolved"
    echo ""
    
    # Send critical alert notification
    echo "üì± Sending critical security alert..."
    task-action send-message --type security-critical --audit-id "$AUDIT_ID"
  else
    echo "‚úÖ No critical security issues found"
  fi

  echo ""
  ```

  ## üìã Step 9: Remediation Guidance
  ```bash
  echo "=== Remediation Guidance ==="

  echo "üõ†Ô∏è  Security remediation guidance:"
  echo ""
  echo "üì¶ Dependency Updates:"
  echo "   npm audit fix                    # Auto-fix vulnerabilities"
  echo "   npm audit fix --force           # Force updates (may break)"
  echo "   npm update                      # Update to latest versions"
  echo ""
  echo "üîí Security Hardening:"
  echo "   npm install helmet              # Security headers"
  echo "   npm install express-rate-limit  # Rate limiting"
  echo "   npm install cors                # CORS configuration"
  echo "   npm install bcrypt              # Password hashing"
  echo ""
  echo "üß™ Security Testing:"
  echo "   npm install --save-dev jest-security  # Security testing"
  echo "   npm install -g snyk                   # Vulnerability scanning"
  echo ""
  echo "üìö Resources:"
  echo "   - OWASP Top 10: https://owasp.org/www-project-top-ten/"
  echo "   - Node.js Security: https://nodejs.org/en/security/"
  echo "   - Security Headers: https://securityheaders.com/"
  echo ""
  echo "üéØ Next audit: Schedule in 30 days"
  echo ""
  echo "üîí Security audit completed!"
  echo "üìÑ Full report: $AUDIT_DIR/security-report.md"
  ```

  **üîí Comprehensive security audit completed with detailed findings and remediation guidance!**
