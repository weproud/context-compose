version: 1
kind: action
name: Test
description: Comprehensive testing execution with detailed analysis and reporting
prompt: |
  Execute comprehensive testing with detailed analysis and quality validation.

  This action runs complete test suites including unit, integration, and end-to-end
  tests with proper environment setup and failure analysis. It ensures code quality
  through coverage validation and provides detailed reporting for continuous
  improvement.

  Use this for quality assurance before deployments, code reviews, or when
  validating new features. The process includes automated test discovery,
  parallel execution, and comprehensive reporting for team visibility.
enhanced-prompt: |-
  # 🧪 Testing Workflow

  ## Core Steps

  **1. Environment Setup**
  ```bash
  # Check test environment
  [ -f "package.json" ] || { echo "❌ No package.json"; exit 1; }

  # Install dependencies
  npm ci || npm install

  # Check test configuration
  [ -f "jest.config.js" ] && echo "✅ Jest config found" || echo "⚠️ No Jest config"
  ```

  **2. Test Discovery & Execution**
  ```bash
  # Run different test types
  echo "🧪 Running unit tests..."
  npm run test:unit 2>/dev/null || npm test

  echo "🔗 Running integration tests..."
  npm run test:integration 2>/dev/null || echo "⚠️ No integration tests"

  echo "🌐 Running e2e tests..."
  npm run test:e2e 2>/dev/null || echo "⚠️ No e2e tests"
  ```

  **3. Coverage Analysis**
  ```bash
  # Generate coverage report
  npm run test:coverage 2>/dev/null || npm test -- --coverage

  # Check coverage threshold
  COVERAGE=$(grep -o '"lines":{"pct":[0-9.]*' coverage/coverage-summary.json 2>/dev/null | cut -d: -f3 || echo "0")

  if [ $(echo "$COVERAGE >= 80" | bc -l 2>/dev/null || echo "0") -eq 1 ]; then
    echo "✅ Coverage: ${COVERAGE}% (meets 80% threshold)"
  else
    echo "⚠️ Coverage: ${COVERAGE}% (below 80% threshold)"
  fi
  ```

  **4. Results Analysis**
  ```bash
  # Test summary
  echo "📊 Test Results Summary:"
  echo "- Unit tests: $(npm test 2>&1 | grep -o '[0-9]* passing' || echo 'Unknown')"
  echo "- Coverage: ${COVERAGE}%"
  echo "- Status: $([ $? -eq 0 ] && echo '✅ All tests passed' || echo '❌ Some tests failed')"

  # Generate report
  echo "📄 Test report available in coverage/ directory"
  ```

  **🎯 Result:** Comprehensive test validation with quality metrics and detailed reporting
