version: 1
kind: action
name: Code Review
description: Comprehensive code review process with automated analysis and quality checks
prompt: Perform thorough code review including automated analysis, security checks, performance review, and generate detailed feedback report.
enhanced-prompt: |-
  # 🔍 Comprehensive Code Review Workflow

  **Conduct professional code review with automated analysis and detailed feedback.**

  ## 📋 Step 1: Pre-Review Setup
  ```bash
  echo "=== Code Review Initialization ==="
  
  # Get review context
  CURRENT_BRANCH=$(git branch --show-current)
  BASE_BRANCH=${1:-main}
  REVIEWER=$(git config user.name)
  REVIEW_DATE=$(date '+%Y-%m-%d %H:%M:%S')
  
  echo "🔍 Reviewing branch: $CURRENT_BRANCH"
  echo "📊 Base branch: $BASE_BRANCH"
  echo "👤 Reviewer: $REVIEWER"
  echo "📅 Date: $REVIEW_DATE"
  echo ""
  ```

  ## 📊 Step 2: Change Analysis
  ```bash
  echo "=== Change Analysis ==="
  
  # Get diff statistics
  git diff --stat $BASE_BRANCH..$CURRENT_BRANCH
  echo ""
  
  # Count changes
  FILES_CHANGED=$(git diff --name-only $BASE_BRANCH..$CURRENT_BRANCH | wc -l)
  LINES_ADDED=$(git diff --numstat $BASE_BRANCH..$CURRENT_BRANCH | awk '{sum+=$1} END {print sum+0}')
  LINES_REMOVED=$(git diff --numstat $BASE_BRANCH..$CURRENT_BRANCH | awk '{sum+=$2} END {print sum+0}')
  
  echo "📈 Summary:"
  echo "  Files changed: $FILES_CHANGED"
  echo "  Lines added: $LINES_ADDED"
  echo "  Lines removed: $LINES_REMOVED"
  echo ""
  ```

  ## 🧪 Step 3: Automated Quality Checks
  ```bash
  echo "=== Automated Quality Checks ==="
  
  # TypeScript/JavaScript checks
  if [ -f "package.json" ]; then
    echo "🔧 Running linter..."
    npm run lint 2>/dev/null || echo "⚠️  No linter configured"
    
    echo "📝 Type checking..."
    npm run type-check 2>/dev/null || tsc --noEmit 2>/dev/null || echo "⚠️  No TypeScript check"
    
    echo "🎨 Format checking..."
    npm run format:check 2>/dev/null || echo "⚠️  No formatter check"
  fi
  
  # Security scan
  echo "🔒 Security scan..."
  npm audit 2>/dev/null || echo "⚠️  No security audit available"
  
  echo "✅ Automated checks completed"
  echo ""
  ```

  ## 🧪 Step 4: Test Coverage Analysis
  ```bash
  echo "=== Test Coverage Analysis ==="
  
  # Run tests with coverage
  npm run test:coverage 2>/dev/null || npm test -- --coverage 2>/dev/null || echo "⚠️  No coverage report available"
  
  # Check for test files
  TEST_FILES=$(find . -name "*.test.*" -o -name "*.spec.*" | grep -v node_modules | wc -l)
  echo "🧪 Test files found: $TEST_FILES"
  
  echo "✅ Test analysis completed"
  echo ""
  ```

  ## 🔍 Step 5: Code Quality Review
  ```bash
  echo "=== Code Quality Review ==="
  
  # Check for common issues
  echo "🔍 Checking for common issues..."
  
  # TODO/FIXME comments
  TODO_COUNT=$(git diff $BASE_BRANCH..$CURRENT_BRANCH | grep -i "TODO\|FIXME" | wc -l)
  echo "📝 TODO/FIXME comments: $TODO_COUNT"
  
  # Console.log statements (for JS/TS)
  CONSOLE_LOGS=$(git diff $BASE_BRANCH..$CURRENT_BRANCH | grep -E "console\.(log|debug|info)" | wc -l)
  echo "🖥️  Console statements: $CONSOLE_LOGS"
  
  # Large files (>500 lines)
  LARGE_FILES=$(git diff --name-only $BASE_BRANCH..$CURRENT_BRANCH | xargs wc -l 2>/dev/null | awk '$1 > 500 {print $2}' | grep -v total | wc -l)
  echo "📄 Large files (>500 lines): $LARGE_FILES"
  
  echo "✅ Quality review completed"
  echo ""
  ```

  ## 📋 Step 6: Generate Review Checklist
  ```bash
  echo "=== Code Review Checklist ==="
  
  cat << EOF > /tmp/code_review_checklist.md
  # Code Review Checklist - $CURRENT_BRANCH

  **Reviewer:** $REVIEWER  
  **Date:** $REVIEW_DATE  
  **Branch:** $CURRENT_BRANCH → $BASE_BRANCH

  ## 📊 Change Summary
  - Files changed: $FILES_CHANGED
  - Lines added: $LINES_ADDED
  - Lines removed: $LINES_REMOVED

  ## ✅ Review Criteria

  ### Code Quality
  - [ ] Code follows project style guidelines
  - [ ] Functions and variables have meaningful names
  - [ ] Code is properly commented where necessary
  - [ ] No unnecessary complexity or over-engineering
  - [ ] DRY principle followed (Don't Repeat Yourself)

  ### Functionality
  - [ ] Code does what it's supposed to do
  - [ ] Edge cases are handled appropriately
  - [ ] Error handling is implemented
  - [ ] No obvious bugs or logical errors

  ### Testing
  - [ ] Adequate test coverage for new code
  - [ ] Tests are meaningful and test the right things
  - [ ] All tests pass
  - [ ] No test code in production builds

  ### Security
  - [ ] No sensitive data exposed
  - [ ] Input validation implemented
  - [ ] No security vulnerabilities introduced
  - [ ] Dependencies are secure and up-to-date

  ### Performance
  - [ ] No obvious performance issues
  - [ ] Efficient algorithms and data structures used
  - [ ] No memory leaks
  - [ ] Database queries optimized (if applicable)

  ### Documentation
  - [ ] README updated if necessary
  - [ ] API documentation updated
  - [ ] Code comments explain complex logic
  - [ ] CHANGELOG updated

  ## 🔍 Detailed Review Notes
  
  ### Positive Aspects
  - 
  
  ### Areas for Improvement
  - 
  
  ### Questions/Concerns
  - 
  
  ## 📝 Recommendation
  - [ ] ✅ Approve
  - [ ] ✅ Approve with minor changes
  - [ ] 🔄 Request changes
  - [ ] ❌ Reject

  ## 📋 Action Items
  - [ ] 
  
  ---
  *Generated by task-action code review*
  EOF
  
  echo "📄 Review checklist generated: /tmp/code_review_checklist.md"
  echo ""
  ```

  ## 🎯 Step 7: Interactive Review Process
  ```bash
  echo "=== Interactive Review ==="
  echo ""
  echo "🔍 Review the generated checklist and fill in your feedback:"
  echo "📄 File: /tmp/code_review_checklist.md"
  echo ""
  echo "💡 Helpful commands for detailed review:"
  echo "  git diff $BASE_BRANCH..$CURRENT_BRANCH          # See all changes"
  echo "  git log $BASE_BRANCH..$CURRENT_BRANCH --oneline # See commit history"
  echo "  git show <commit-hash>                          # Review specific commit"
  echo ""
  echo "🔧 Open checklist for editing:"
  echo "  code /tmp/code_review_checklist.md  # VS Code"
  echo "  vim /tmp/code_review_checklist.md   # Vim"
  echo "  nano /tmp/code_review_checklist.md  # Nano"
  ```

  ## 📤 Step 8: Submit Review
  ```bash
  echo "=== Submit Review ==="
  echo ""
  echo "📝 After completing your review:"
  echo ""
  echo "1. 💾 Save your completed checklist"
  echo "2. 📋 Copy feedback to PR/MR comments"
  echo "3. 🎯 Set appropriate review status"
  echo "4. 📱 Notify the author"
  echo ""
  echo "🚀 Quick actions:"
  echo "  # Copy checklist to clipboard (macOS)"
  echo "  pbcopy < /tmp/code_review_checklist.md"
  echo ""
  echo "  # Send review notification"
  echo "  task-action send-message --type review-completed"
  ```

  **🔍 Comprehensive code review completed with professional standards!**
