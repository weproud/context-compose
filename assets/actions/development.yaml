version: 1
kind: action
name: Development
description: Develop task implementation with TypeScript best practices and testing
prompt: |
  Transform requirements into high-quality, production-ready code with comprehensive testing.

  This action implements complete development workflows including requirement analysis,
  code architecture design, test-driven development, quality assurance, and documentation.
  It follows best practices for TypeScript/JavaScript development with proper error
  handling, performance optimization, and maintainability.

  Use this for feature implementation, bug fixes, or code refactoring. The process
  includes automated testing, code review preparation, and deployment readiness
  validation to ensure professional development standards.
enhanced-prompt: |-
  # 💻 Development Workflow

  ## Core Steps

  **1. Analysis & Setup**
  ```bash
  # Analyze project structure
  find src/ -name "*.ts" -o -name "*.js" | head -10

  # Check existing patterns
  [ -f "tsconfig.json" ] && echo "✅ TypeScript" || echo "⚠️ No TypeScript"
  [ -f "package.json" ] && npm list --depth=0

  # Install dependencies
  npm install
  ```

  **2. Test-First Development**
  ```bash
  # Create test file
  cat > src/feature.test.ts << EOF
  import { describe, it, expect } from 'vitest';
  import { FeatureClass } from './feature';

  describe('FeatureClass', () => {
    it('should handle valid input', () => {
      const feature = new FeatureClass();
      const result = feature.process('test');
      expect(result.success).toBe(true);
    });
  });
  EOF

  # Run tests (should fail initially)
  npm test
  ```

  **3. Implementation**
  ```bash
  # Create implementation
  cat > src/feature.ts << EOF
  export interface ProcessResult {
    success: boolean;
    data: string;
    timestamp: string;
  }

  export class FeatureClass {
    public process(input: string): ProcessResult {
      if (!input?.trim()) {
        throw new Error('Input cannot be empty');
      }
      
      return {
        success: true,
        data: input.toUpperCase(),
        timestamp: new Date().toISOString()
      };
    }
  }
  EOF
  ```

  **4. Quality & Validation**
  ```bash
  # Type checking
  [ -f "tsconfig.json" ] && npx tsc --noEmit

  # Linting
  npm run lint 2>/dev/null || npx eslint src/

  # Tests
  npm test

  # Build
  npm run build

  echo "✅ Development completed"
  ```

  **🎯 Result:** Production-ready code with tests and quality validation
