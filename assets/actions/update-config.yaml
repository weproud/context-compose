version: 1
kind: action
name: Update Configuration
description: Update project configuration files and settings
prompt: |
  Update project configuration files with proper validation and backup.

  This action helps manage configuration updates including package.json,
  environment variables, TypeScript config, and other project settings.
  It ensures configuration consistency and provides rollback capabilities
  for safe configuration management.

  Use this when updating project settings, dependencies, or environment
  configuration. The process includes backup creation, validation, and
  verification to maintain project stability during configuration changes.
enhanced-prompt: |-
  # ⚙️ 설정 업데이트

  ## 1단계: 설정 파일 백업
  ```bash
  echo "=== 설정 업데이트 시작 ==="

  # 백업 디렉토리 생성
  BACKUP_DIR="config-backup-$(date +%Y%m%d-%H%M%S)"
  mkdir -p "$BACKUP_DIR"

  # 주요 설정 파일 백업
  echo "💾 설정 파일 백업 중..."
  [ -f "package.json" ] && cp package.json "$BACKUP_DIR/"
  [ -f "tsconfig.json" ] && cp tsconfig.json "$BACKUP_DIR/"
  [ -f ".env" ] && cp .env "$BACKUP_DIR/"
  [ -f ".env.example" ] && cp .env.example "$BACKUP_DIR/"
  [ -f "jest.config.js" ] && cp jest.config.js "$BACKUP_DIR/"
  [ -f "eslint.config.js" ] && cp eslint.config.js "$BACKUP_DIR/"
  [ -f ".eslintrc.js" ] && cp .eslintrc.js "$BACKUP_DIR/"

  echo "✅ 백업 완료: $BACKUP_DIR"
  ```

  ## 2단계: 설정 유형 선택
  ```bash
  echo "🔧 어떤 설정을 업데이트하시겠습니까?"
  echo "1) package.json (의존성, 스크립트)"
  echo "2) TypeScript 설정 (tsconfig.json)"
  echo "3) 환경 변수 (.env)"
  echo "4) ESLint 설정"
  echo "5) Jest 테스트 설정"
  echo "6) 전체 설정 검토"

  read -p "선택 (1-6): " CONFIG_TYPE
  ```

  ## 3단계: 설정별 업데이트
  ```bash
  case "$CONFIG_TYPE" in
    1)
      echo "📦 package.json 업데이트..."
      echo "현재 package.json 정보:"
      [ -f "package.json" ] && cat package.json | jq '.name, .version, .scripts' 2>/dev/null || echo "package.json 파일이 없습니다"
      echo ""
      echo "업데이트 옵션:"
      echo "- npm install <package> : 새 패키지 설치"
      echo "- npm uninstall <package> : 패키지 제거"
      echo "- npm update : 패키지 업데이트"
      ;;
    2)
      echo "🔧 TypeScript 설정 업데이트..."
      if [ ! -f "tsconfig.json" ]; then
        echo "tsconfig.json이 없습니다. 생성하시겠습니까? (y/n)"
        read -p "> " CREATE_TS
        if [ "$CREATE_TS" = "y" ]; then
          npx tsc --init
          echo "✅ tsconfig.json 생성 완료"
        fi
      else
        echo "현재 TypeScript 설정:"
        cat tsconfig.json | jq '.compilerOptions.target, .compilerOptions.module' 2>/dev/null || echo "설정 파일 확인 필요"
      fi
      ;;
    3)
      echo "🌍 환경 변수 업데이트..."
      echo "현재 .env.example:"
      [ -f ".env.example" ] && cat .env.example || echo ".env.example 파일이 없습니다"
      echo ""
      echo "📝 환경 변수 추가/수정 후 Enter를 누르세요:"
      read
      ;;
    4)
      echo "📝 ESLint 설정 업데이트..."
      if [ ! -f ".eslintrc.js" ] && [ ! -f "eslint.config.js" ]; then
        echo "ESLint 설정이 없습니다. 초기화하시겠습니까? (y/n)"
        read -p "> " INIT_ESLINT
        if [ "$INIT_ESLINT" = "y" ]; then
          npx eslint --init
          echo "✅ ESLint 설정 완료"
        fi
      fi
      ;;
    5)
      echo "🧪 Jest 설정 업데이트..."
      if [ ! -f "jest.config.js" ]; then
        echo "Jest 설정이 없습니다. 기본 설정을 생성하시겠습니까? (y/n)"
        read -p "> " CREATE_JEST
        if [ "$CREATE_JEST" = "y" ]; then
          cat > jest.config.js << EOF
  module.exports = {
    preset: 'ts-jest',
    testEnvironment: 'node',
    roots: ['<rootDir>/src', '<rootDir>/tests'],
    testMatch: ['**/*.test.ts', '**/*.spec.ts'],
    collectCoverageFrom: ['src/**/*.ts'],
    coverageDirectory: 'coverage'
  };
  EOF
          echo "✅ Jest 설정 생성 완료"
        fi
      fi
      ;;
    6)
      echo "🔍 전체 설정 검토..."
      echo "프로젝트 설정 현황:"
      echo "- package.json: $([ -f "package.json" ] && echo "✅" || echo "❌")"
      echo "- tsconfig.json: $([ -f "tsconfig.json" ] && echo "✅" || echo "❌")"
      echo "- .env.example: $([ -f ".env.example" ] && echo "✅" || echo "❌")"
      echo "- ESLint: $([ -f ".eslintrc.js" ] || [ -f "eslint.config.js" ] && echo "✅" || echo "❌")"
      echo "- Jest: $([ -f "jest.config.js" ] && echo "✅" || echo "❌")"
      ;;
  esac
  ```

  ## 4단계: 설정 검증
  ```bash
  echo "🔍 설정 검증 중..."

  # package.json 검증
  if [ -f "package.json" ]; then
    node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))" && echo "✅ package.json 유효" || echo "❌ package.json 오류"
  fi

  # TypeScript 설정 검증
  if [ -f "tsconfig.json" ]; then
    npx tsc --noEmit 2>/dev/null && echo "✅ TypeScript 설정 유효" || echo "⚠️ TypeScript 검증 필요"
  fi

  # ESLint 설정 검증
  if [ -f ".eslintrc.js" ] || [ -f "eslint.config.js" ]; then
    npm run lint 2>/dev/null && echo "✅ ESLint 설정 유효" || echo "⚠️ ESLint 검증 필요"
  fi

  echo "✅ 설정 검증 완료"
  ```

  ## 5단계: 변경사항 커밋
  ```bash
  # 변경된 파일 확인
  echo "📋 변경된 설정 파일:"
  git status --porcelain | grep -E "\.(json|js|env)$" || echo "변경사항 없음"

  # 변경사항이 있으면 커밋
  if [ -n "$(git status --porcelain)" ]; then
    git add .
    git commit -m "config: update project configuration

  - Update configuration files
  - Backup created in $BACKUP_DIR
  - Settings validated and verified"
    
    echo "✅ 설정 변경사항 커밋 완료"
  else
    echo "ℹ️ 변경사항이 없습니다"
  fi

  echo "🎉 설정 업데이트 완료!"
  echo "📋 백업 위치: $BACKUP_DIR"
  echo "🔄 롤백이 필요한 경우: cp $BACKUP_DIR/* ."
  ```

  **🎯 결과:** 안전하게 업데이트되고 검증된 프로젝트 설정
