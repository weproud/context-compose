version: 1
kind: action
name: Setup Environment
description: Automated development environment setup with dependencies, tools, and configuration
prompt: Set up complete development environment including dependencies, development tools, environment variables, and project configuration.
enhanced-prompt: |-
  # ⚙️ 개발 환경 설정

  ## 1단계: 프로젝트 타입 확인
  ```bash
  echo "=== 개발 환경 설정 시작 ==="

  PROJECT_NAME=$(basename $(pwd))
  echo "📁 프로젝트: $PROJECT_NAME"

  # 프로젝트 타입 자동 감지
  if [ -f "package.json" ]; then
    PROJECT_TYPE="node"
    echo "📦 Node.js 프로젝트 감지"
  elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
    PROJECT_TYPE="python"
    echo "🐍 Python 프로젝트 감지"
  else
    PROJECT_TYPE="generic"
    echo "📄 일반 프로젝트"
  fi
  ```

  ## 2단계: 의존성 설치
  ```bash
  echo "📦 의존성 설치 중..."

  case "$PROJECT_TYPE" in
    "node")
      # Node.js 환경 확인
      if ! command -v node >/dev/null 2>&1; then
        echo "❌ Node.js가 설치되지 않음"
        echo "📥 https://nodejs.org 에서 Node.js를 설치하세요"
        exit 1
      fi
      
      # 패키지 설치
      echo "📥 npm 패키지 설치..."
      npm install
      
      # 개발 도구 설치
      if ! npm list typescript >/dev/null 2>&1; then
        echo "🔧 TypeScript 설치..."
        npm install -D typescript @types/node
      fi
      ;;
      
    "python")
      # Python 환경 확인
      if ! command -v python3 >/dev/null 2>&1; then
        echo "❌ Python3가 설치되지 않음"
        echo "📥 Python을 설치하세요"
        exit 1
      fi
      
      # 가상환경 생성
      if [ ! -d "venv" ]; then
        echo "🏗️ 가상환경 생성..."
        python3 -m venv venv
      fi
      
      # 가상환경 활성화 및 의존성 설치
      echo "🔌 가상환경 활성화..."
      source venv/bin/activate
      pip install --upgrade pip
      
      if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
      fi
      ;;
  esac

  echo "✅ 의존성 설치 완료"
  ```

  ## 3단계: 기본 설정 파일 생성
  ```bash
  echo "📄 기본 설정 파일 생성..."

  # .gitignore 생성
  if [ ! -f ".gitignore" ]; then
    cat > .gitignore << EOF
  # Dependencies
  node_modules/
  venv/

  # Environment
  .env
  .env.local

  # Build
  dist/
  build/

  # Logs
  *.log

  # OS files
  .DS_Store
  Thumbs.db
  EOF
    echo "✅ .gitignore 생성"
  fi

  # 환경변수 템플릿
  if [ ! -f ".env.example" ]; then
    cat > .env.example << EOF
  NODE_ENV=development
  PORT=3000
  EOF
    echo "✅ .env.example 생성"
  fi

  # VS Code 설정
  mkdir -p .vscode
  if [ ! -f ".vscode/settings.json" ]; then
    cat > .vscode/settings.json << EOF
  {
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": true
    }
  }
  EOF
    echo "✅ VS Code 설정 생성"
  fi
  ```

  ## 4단계: 테스트 환경 설정
  ```bash
  if [ "$PROJECT_TYPE" = "node" ]; then
    echo "🧪 테스트 환경 설정..."
    
    # Jest 설치 확인
    if ! npm list jest >/dev/null 2>&1; then
      echo "📦 Jest 설치..."
      npm install -D jest @types/jest
    fi
    
    # Jest 설정 파일 생성
    if [ ! -f "jest.config.js" ]; then
      cat > jest.config.js << EOF
  module.exports = {
    testEnvironment: 'node',
    roots: ['<rootDir>/src', '<rootDir>/tests'],
    testMatch: ['**/*.test.ts', '**/*.test.js'],
    collectCoverageFrom: ['src/**/*.{ts,js}']
  };
  EOF
      echo "✅ Jest 설정 생성"
    fi
    
    # 테스트 디렉토리 생성
    mkdir -p tests
  fi
  ```

  ## 5단계: 설정 완료
  ```bash
  echo "🎉 개발 환경 설정 완료!"
  echo ""
  echo "📋 설정된 항목:"
  echo "  ✅ 프로젝트 타입: $PROJECT_TYPE"
  echo "  ✅ 의존성 설치 완료"
  echo "  ✅ 기본 설정 파일 생성"
  echo "  ✅ 개발 도구 구성"
  echo ""
  echo "🚀 다음 단계:"
  if [ "$PROJECT_TYPE" = "node" ]; then
    echo "  1. npm run dev로 개발 서버 시작"
    echo "  2. npm test로 테스트 실행"
  else
    echo "  1. 프로젝트별 개발 환경 설정"
    echo "  2. 개발 시작"
  fi
  echo ""
  echo "📝 추가 설정이 필요한 경우:"
  echo "  - .env 파일에 환경변수 설정"
  echo "  - VS Code 확장 설치"
  echo "  - 프로젝트별 설정 커스터마이징"
  ```

  **🎯 결과:** 개발 준비가 완료된 환경
