version: 1
kind: action
name: Add Feature
description: Add a new feature with proper branch setup and file structure
prompt: |
  Add a new feature following best practices with proper workflow and structure.

  This action creates a feature branch, sets up the necessary file structure,
  creates placeholder files, and prepares the development environment for
  implementing a new feature. It follows Git Flow conventions and ensures
  proper development practices.

  Use this when starting development of a new feature. The process includes
  branch creation, file scaffolding, and test preparation for efficient
  feature development workflow.
enhanced-prompt: |-
  # ✨ 새 기능 추가

  ## 1단계: 기능 브랜치 생성
  ```bash
  echo "=== 새 기능 추가 시작 ==="

  # 기능 이름 입력 받기
  echo "🔍 추가할 기능 이름을 입력하세요:"
  read -p "기능 이름: " FEATURE_NAME

  # 브랜치 이름 생성
  BRANCH_NAME="feature/$(echo $FEATURE_NAME | tr ' ' '-' | tr '[:upper:]' '[:lower:]')"
  echo "🌿 브랜치: $BRANCH_NAME"

  # 메인 브랜치에서 최신 상태로 업데이트
  git checkout main
  git pull origin main

  # 기능 브랜치 생성
  git checkout -b "$BRANCH_NAME"
  echo "✅ 기능 브랜치 생성 완료"
  ```

  ## 2단계: 파일 구조 생성
  ```bash
  # 기능별 디렉토리 생성
  FEATURE_DIR="src/features/$(echo $FEATURE_NAME | tr ' ' '-' | tr '[:upper:]' '[:lower:]')"
  mkdir -p "$FEATURE_DIR"

  # 기본 파일 생성
  cat > "$FEATURE_DIR/index.ts" << EOF
  // $FEATURE_NAME 기능

  export class ${FEATURE_NAME//[^a-zA-Z0-9]/}Feature {
    constructor() {
      // TODO: 초기화 로직
    }
    
    public async execute(): Promise<void> {
      // TODO: 기능 구현
      throw new Error('Not implemented');
    }
  }
  EOF

  echo "✅ 기본 파일 생성 완료: $FEATURE_DIR/index.ts"
  ```

  ## 3단계: 테스트 파일 생성
  ```bash
  # 테스트 디렉토리 생성
  TEST_DIR="tests/features/$(echo $FEATURE_NAME | tr ' ' '-' | tr '[:upper:]' '[:lower:]')"
  mkdir -p "$TEST_DIR"

  # 테스트 파일 생성
  cat > "$TEST_DIR/index.test.ts" << EOF
  import { ${FEATURE_NAME//[^a-zA-Z0-9]/}Feature } from '../../../src/features/$(echo $FEATURE_NAME | tr ' ' '-' | tr '[:upper:]' '[:lower:]')';

  describe('${FEATURE_NAME//[^a-zA-Z0-9]/}Feature', () => {
    let feature: ${FEATURE_NAME//[^a-zA-Z0-9]/}Feature;
    
    beforeEach(() => {
      feature = new ${FEATURE_NAME//[^a-zA-Z0-9]/}Feature();
    });
    
    it('should be created', () => {
      expect(feature).toBeDefined();
    });
    
    it('should execute successfully', async () => {
      // TODO: 테스트 구현
      await expect(feature.execute()).rejects.toThrow('Not implemented');
    });
  });
  EOF

  echo "✅ 테스트 파일 생성 완료: $TEST_DIR/index.test.ts"
  ```

  ## 4단계: 개발 환경 준비
  ```bash
  # 변경사항 커밋
  git add .
  git commit -m "feat: add $FEATURE_NAME feature scaffold

  - Create feature directory structure
  - Add basic implementation template
  - Add test template
  - Ready for development"

  # 원격 브랜치 생성
  git push -u origin "$BRANCH_NAME"

  echo "🎉 기능 추가 준비 완료!"
  echo "📝 다음 단계:"
  echo "  1. $FEATURE_DIR/index.ts 파일에서 기능 구현"
  echo "  2. $TEST_DIR/index.test.ts 파일에서 테스트 작성"
  echo "  3. 개발 완료 후 task-action complete 실행"
  ```

  **🎯 결과:** 새 기능 개발을 위한 완전한 환경 구성
