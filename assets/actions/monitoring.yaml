version: 1
kind: action
name: Monitoring Setup
description: Configure comprehensive application monitoring with metrics, logging, and alerting
prompt: |
  Set up comprehensive monitoring infrastructure for application health and performance.

  This action configures monitoring systems including metrics collection, log
  aggregation, health checks, and alerting mechanisms. It provides real-time
  visibility into application performance and enables proactive issue detection
  and resolution.

  Use this for production deployments, performance monitoring, or when establishing
  observability practices. The process includes dashboard creation, alert
  configuration, and integration with popular monitoring platforms.
enhanced-prompt: |-
  # ðŸ“Š Monitoring Setup Workflow

  ## Core Steps

  **1. Health Check Endpoints**
  ```bash
  # Create health check endpoint
  mkdir -p src/health

  cat > src/health/health.js << EOF
  const express = require('express');
  const router = express.Router();

  router.get('/health', (req, res) => {
    res.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      version: process.env.npm_package_version || '1.0.0'
    });
  });

  module.exports = router;
  EOF

  echo "âœ… Health check endpoint created"
  ```

  **2. Metrics Collection**
  ```bash
  # Install monitoring dependencies
  npm install prom-client express-prometheus-middleware

  # Create metrics configuration
  cat > src/monitoring/metrics.js << EOF
  const promClient = require('prom-client');

  // Create metrics
  const httpRequestDuration = new promClient.Histogram({
    name: 'http_request_duration_seconds',
    help: 'Duration of HTTP requests in seconds',
    labelNames: ['method', 'route', 'status']
  });

  const httpRequestTotal = new promClient.Counter({
    name: 'http_requests_total',
    help: 'Total number of HTTP requests',
    labelNames: ['method', 'route', 'status']
  });

  module.exports = { httpRequestDuration, httpRequestTotal };
  EOF

  echo "âœ… Metrics collection configured"
  ```

  **3. Logging Setup**
  ```bash
  # Install logging library
  npm install winston

  # Create logger configuration
  cat > src/utils/logger.js << EOF
  const winston = require('winston');

  const logger = winston.createLogger({
    level: process.env.LOG_LEVEL || 'info',
    format: winston.format.combine(
      winston.format.timestamp(),
      winston.format.errors({ stack: true }),
      winston.format.json()
    ),
    transports: [
      new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
      new winston.transports.File({ filename: 'logs/combined.log' }),
      new winston.transports.Console({
        format: winston.format.simple()
      })
    ]
  });

  module.exports = logger;
  EOF

  mkdir -p logs/
  echo "âœ… Logging system configured"
  ```

  **4. Dashboard & Alerts**
  ```bash
  # Create monitoring dashboard config
  cat > monitoring/dashboard.json << EOF
  {
    "dashboard": {
      "title": "Application Monitoring",
      "panels": [
        {
          "title": "Request Rate",
          "type": "graph",
          "targets": ["rate(http_requests_total[5m])"]
        },
        {
          "title": "Response Time",
          "type": "graph", 
          "targets": ["http_request_duration_seconds"]
        },
        {
          "title": "Error Rate",
          "type": "singlestat",
          "targets": ["rate(http_requests_total{status=~'5..'}[5m])"]
        }
      ]
    }
  }
  EOF

  echo "ðŸ“Š Monitoring dashboard configured"
  echo "ðŸ”” Set up alerts for error rates > 5% and response time > 2s"
  ```

  **ðŸŽ¯ Result:** Complete monitoring infrastructure with metrics, logs, and alerts
