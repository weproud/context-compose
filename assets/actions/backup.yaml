version: 1
kind: action
name: Backup Management
description: Automated backup creation and restoration with scheduling and verification
prompt: |
  Create and manage automated backups for databases, files, and configurations.

  This action implements comprehensive backup strategies including database dumps,
  file system backups, configuration snapshots, and automated scheduling. It
  provides restoration capabilities and backup verification to ensure data
  integrity and business continuity.

  Use this for data protection, disaster recovery planning, or before major
  system changes. The process includes backup validation, compression,
  encryption, and automated cleanup of old backups.
enhanced-prompt: |-
  # üíæ Backup Management Workflow

  ## Core Steps

  **1. Backup Configuration**
  ```bash
  # Create backup directory structure
  mkdir -p backups/{database,files,config}
  BACKUP_DATE=$(date +%Y%m%d-%H%M%S)

  # Set backup retention (days)
  RETENTION_DAYS=${BACKUP_RETENTION:-30}

  echo "üíæ Backup session: $BACKUP_DATE"
  echo "üìÖ Retention: $RETENTION_DAYS days"
  ```

  **2. Database Backup**
  ```bash
  # Database backup
  if [ -n "$DATABASE_URL" ]; then
    echo "üóÑÔ∏è Creating database backup..."
    
    DB_BACKUP="backups/database/db-$BACKUP_DATE.sql"
    pg_dump "$DATABASE_URL" > "$DB_BACKUP" || {
      echo "‚ùå Database backup failed"
      exit 1
    }
    
    # Compress backup
    gzip "$DB_BACKUP"
    echo "‚úÖ Database backup: ${DB_BACKUP}.gz"
  fi
  ```

  **3. File System Backup**
  ```bash
  # Application files backup
  echo "üìÅ Creating file system backup..."

  FILES_BACKUP="backups/files/files-$BACKUP_DATE.tar.gz"
  tar -czf "$FILES_BACKUP" \
    --exclude='node_modules' \
    --exclude='.git' \
    --exclude='backups' \
    --exclude='logs' \
    . || {
    echo "‚ùå File backup failed"
    exit 1
  }

  echo "‚úÖ Files backup: $FILES_BACKUP"
  ```

  **4. Cleanup & Verification**
  ```bash
  # Remove old backups
  echo "üßπ Cleaning up old backups..."
  find backups/ -name "*.gz" -mtime +$RETENTION_DAYS -delete
  find backups/ -name "*.tar.gz" -mtime +$RETENTION_DAYS -delete

  # Verify backup integrity
  echo "üîç Verifying backup integrity..."
  for backup in backups/*/*.gz; do
    if [ -f "$backup" ]; then
      gzip -t "$backup" && echo "‚úÖ $(basename $backup)" || echo "‚ùå $(basename $backup)"
    fi
  done

  # Backup summary
  TOTAL_SIZE=$(du -sh backups/ | cut -f1)
  BACKUP_COUNT=$(find backups/ -name "*.gz" | wc -l)

  echo "üìä Backup Summary:"
  echo "  - Total size: $TOTAL_SIZE"
  echo "  - Backup count: $BACKUP_COUNT"
  echo "  - Latest: $BACKUP_DATE"
  ```

  **üéØ Result:** Complete backup system with automated cleanup and verification
