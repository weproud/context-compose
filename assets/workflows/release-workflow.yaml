version: 1
kind: workflow
name: Release Workflow
description: Production release workflow with comprehensive validation and deployment
jobs:
  steps:
    - name: Create Release Branch
      uses: actions/create-branch.yaml

    - name: Version Bump
      uses: actions/version-bump.yaml

    - name: Build
      uses: actions/build.yaml

    - name: Test
      uses: actions/test.yaml

    - name: Security Audit
      uses: actions/security-audit.yaml

    - name: Performance Test
      uses: actions/performance-test.yaml

    - name: Documentation
      uses: actions/documentation.yaml

    - name: Git Commit
      uses: actions/git-commit.yaml

    - name: Git Push
      uses: actions/git-push.yaml

    - name: Create Pull Request
      uses: actions/create-pull-request.yaml

    - name: Deploy
      uses: actions/deploy.yaml

    - name: Complete
      uses: actions/complete.yaml

prompt: |
  Execute production release workflow with comprehensive validation and deployment.
  Apply rigorous quality gates and ensure thorough testing before release.
  Coordinate version management and deployment procedures systematically.
  Document all release activities and maintain release integrity throughout process.
enhanced-prompt: |-
  # Production Release Workflow

  Execute production release with comprehensive validation and deployment procedures:

  ## Release Strategy
  1. **Quality Assurance**: Rigorous testing and validation at every stage
  2. **Version Management**: Systematic version control and changelog maintenance  
  3. **Deployment Safety**: Safe deployment with rollback capabilities
  4. **Documentation**: Complete release documentation and communication

  ## Release Process
  1. **Release Preparation**:
     - Create release branch from develop/main
     - Bump version numbers according to semantic versioning
     - Update changelogs and release notes
     - Prepare deployment configurations

  2. **Build & Validation**:
     - Execute production build process
     - Run comprehensive test suites (unit/integration/E2E)
     - Perform security audits and vulnerability scans
     - Conduct performance testing and benchmarking

  3. **Documentation & Review**:
     - Update API documentation and user guides
     - Generate release notes and migration guides
     - Review all changes and prepare release summary
     - Validate all dependencies and compatibility

  4. **Release Integration**:
     - Commit all release changes with proper versioning
     - Push release branch with appropriate tags
     - Create release pull request with complete documentation
     - Deploy to production environment with monitoring

  5. **Release Completion**:
     - Validate successful deployment and functionality
     - Monitor system health and performance metrics
     - Complete release documentation and archiving
     - Plan post-release activities and next iteration

  ## Quality Gates
  - All tests must pass with 90%+ coverage
  - Security scans must show no critical vulnerabilities
  - Performance tests must meet defined benchmarks
  - Documentation must be complete and accurate

  ## Deployment Safety
  - Blue-green or canary deployment strategies
  - Real-time monitoring during deployment
  - Immediate rollback capability if issues arise
  - Health checks and smoke tests post-deployment

  ## Success Criteria
  - ✅ All quality gates passed successfully
  - ✅ Production deployment completed without issues
  - ✅ System performance meets expectations
  - ✅ Documentation updated and accessible
  - ✅ Release tagged and archived properly
  - ✅ Rollback procedures tested and ready

  Execute each step with precision, ensuring release quality and system stability.
