version: 1
kind: workflow
name: Hotfix Workflow
description: Emergency hotfix workflow for critical production issues

jobs:
  steps:
    - name: Create Hotfix Branch
      uses: actions/create-branch.yaml

    - name: Hotfix Development
      uses: actions/development.yaml

    - name: Test
      uses: actions/test.yaml

    - name: Security Audit
      uses: actions/security-audit.yaml

    - name: Git Commit
      uses: actions/git-commit.yaml

    - name: Git Push
      uses: actions/git-push.yaml

    - name: Create Pull Request
      uses: actions/create-pull-request.yaml

    - name: Complete
      uses: actions/complete.yaml

prompt: |
  Execute emergency hotfix workflow with expedited testing and deployment.
  Focus on critical issue resolution while maintaining safety checks.
  Apply minimal necessary changes and ensure thorough testing.
  Prioritize speed without compromising code quality and security standards.
enhanced-prompt: |-
  # Emergency Hotfix Workflow

  Execute emergency hotfix with expedited process while maintaining critical safety checks:

  ## Hotfix Principles
  1. **Minimal Changes**: Apply only the minimum changes necessary to resolve critical issue
  2. **Safety First**: Maintain essential quality gates despite urgency
  3. **Fast Execution**: Streamline process without skipping critical validations
  4. **Documentation**: Document emergency changes for post-incident review

  ## Emergency Response Process
  1. **Immediate Assessment**:
     - Identify and confirm critical production issue
     - Assess impact scope and urgency level
     - Create hotfix branch from production/main
     - Document incident and planned resolution

  2. **Rapid Development**:
     - Implement targeted fix with minimal scope
     - Focus on root cause resolution
     - Avoid feature additions or unnecessary refactoring
     - Maintain code quality standards where possible

  3. **Essential Testing**:
     - Execute critical path testing
     - Verify fix resolves reported issue
     - Ensure no new regressions introduced
     - Run security scans for any security-related fixes

  4. **Expedited Integration**:
     - Commit changes with clear hotfix messaging
     - Push to hotfix branch with appropriate labels
     - Create pull request with emergency priority
     - Document resolution steps and verification

  5. **Completion & Documentation**:
     - Complete hotfix deployment process
     - Update incident tracking systems
     - Schedule post-incident review
     - Document lessons learned for prevention

  ## Quality Safeguards
  - Essential tests must pass before deployment
  - Security vulnerabilities cannot be introduced
  - Critical functionality must remain intact
  - Rollback plan must be prepared and tested

  ## Success Criteria
  - ✅ Critical issue resolved completely
  - ✅ No new issues introduced
  - ✅ Essential tests pass
  - ✅ Security standards maintained
  - ✅ Deployment ready for production
  - ✅ Incident documentation complete

  Execute with urgency while maintaining essential quality standards.
