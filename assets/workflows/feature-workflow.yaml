version: 1
kind: workflow
name: Feature Workflow
description: Comprehensive feature development workflow with iterative development and quality gates
jobs:
  steps:
    - name: Create Feature Branch
      uses: actions/create-branch.yaml

    - name: Development
      uses: actions/development.yaml

    - name: Lint
      uses: actions/lint.yaml

    - name: Test
      uses: actions/test.yaml

    - name: Code Review
      uses: actions/code-review.yaml

    - name: Security Audit
      uses: actions/security-audit.yaml

    - name: Documentation
      uses: actions/documentation.yaml

    - name: Git Commit
      uses: actions/git-commit.yaml

    - name: Git Push
      uses: actions/git-push.yaml

    - name: Create Pull Request
      uses: actions/create-pull-request.yaml

    - name: Complete
      uses: actions/complete.yaml

prompt: |
  Execute feature development workflow with iterative development and comprehensive testing.
  Break features into manageable increments and implement MVP first.
  Apply quality gates at each step including linting, testing, and security audits.
  Maintain backward compatibility and gather feedback early for continuous improvement.
enhanced-prompt: |-
  Execute feature development workflow with iterative development, comprehensive testing, and quality gates:

  ## Feature Development Strategy
  1. **Iterative Development:**
     - Break features into small, manageable increments
     - Implement MVP (Minimum Viable Product) first
     - Gather feedback early and iterate
     - Maintain backward compatibility during development

  2. **Quality-First Approach:**
     - Test-driven development (TDD) when appropriate
     - Continuous integration and validation
     - Code review at every step
     - Documentation as part of development

  ## Workflow Execution Steps
  1. **Planning & Setup:**
     - Create feature specification with acceptance criteria
     - Set up feature branch from develop
     - Define technical requirements and API contracts
     - Plan development cycles and milestones

  2. **Development Cycles:**
     - Start with core functionality implementation
     - Add features incrementally with working state maintenance
     - Write tests for each increment
     - Apply continuous linting and code quality checks

  3. **Quality Assurance:**
     - Execute comprehensive testing (unit/integration/E2E)
     - Perform code reviews with quality checklist
     - Run security audits and vulnerability scans
     - Validate performance and accessibility requirements

  4. **Documentation & Integration:**
     - Update API documentation and user guides
     - Create pull request with detailed description
     - Ensure all CI/CD checks pass
     - Document completion and next steps

  ## Success Criteria
  - ✅ All acceptance criteria met
  - ✅ Comprehensive test coverage (90%+)
  - ✅ Code quality standards maintained
  - ✅ Security vulnerabilities addressed
  - ✅ Documentation updated
  - ✅ Pull request approved and ready for merge

  Execute each step methodically, ensuring quality and completeness at every stage.
       - [ ] Functions are single-purpose and focused
       - [ ] Variable names are descriptive
       - [ ] No code duplication
       
       ### Testing
       - [ ] Unit tests cover new functionality
       - [ ] Integration tests validate workflows
       - [ ] Test coverage meets requirements
       - [ ] Tests are reliable and maintainable
       
       ### Security
       - [ ] Input validation implemented
       - [ ] Authentication/authorization checked
       - [ ] No sensitive data exposed
       - [ ] SQL injection prevention
       ```

  6. **Security Validation:**
     - **Security Checklist:**
       - Input validation and sanitization
       - Authentication and authorization
       - Data encryption for sensitive information
       - SQL injection and XSS prevention
       - Rate limiting for API endpoints

     - **Security Testing:**
       ```typescript
       // Security test examples
       describe('Profile Security', () => {
         it('should prevent unauthorized profile access', async () => {
           const response = await request(app)
             .get('/api/profiles/other-user-id')
             .set('Authorization', 'Bearer invalid-token')
             .expect(401);
         });
         
         it('should sanitize profile input', async () => {
           const maliciousInput = '<script>alert("xss")</script>';
           const response = await request(app)
             .post('/api/profiles')
             .send({ firstName: maliciousInput })
             .expect(400);
         });
       });
       ```

  7. **Documentation Creation:**
     - **API Documentation:**
       ```yaml
       # OpenAPI specification
       /api/profiles:
         post:
           summary: Create user profile
           requestBody:
             required: true
             content:
               application/json:
                 schema:
                   $ref: '#/components/schemas/CreateProfileRequest'
           responses:
             '201':
               description: Profile created successfully
               content:
                 application/json:
                   schema:
                     $ref: '#/components/schemas/UserProfile'
       ```

     - **Feature Documentation:**
       ```markdown
       # User Profile Management
       
       ## Overview
       The user profile management feature allows users to create and maintain their personal information.
       
       ## Usage
       
       ### Creating a Profile
       ```typescript
       const profile = await profileService.create({
         firstName: 'John',
         lastName: 'Doe',
         email: 'john@example.com'
       });
       ```
       
       ### Updating a Profile
       ```typescript
       const updatedProfile = await profileService.update(profileId, {
         firstName: 'Jane'
       });
       ```
       ```

  8. **Integration & Pull Request:**
     - **Pre-PR Checklist:**
       - All tests passing
       - Code review completed
       - Documentation updated
       - Security audit passed
       - Performance validated

     - **Pull Request Template:**
       ```markdown
       ## Feature: User Profile Management
       
       ### Description
       Implements comprehensive user profile management functionality.
       
       ### Changes Made
       - Added UserProfile model and service
       - Implemented CRUD API endpoints
       - Added profile picture upload support
       - Created comprehensive test suite
       - Updated API documentation
       
       ### Testing
       - [ ] Unit tests: 95% coverage
       - [ ] Integration tests: All passing
       - [ ] E2E tests: Critical paths validated
       - [ ] Manual testing completed
       
       ### Security
       - [ ] Input validation implemented
       - [ ] Authorization checks in place
       - [ ] Security audit completed
       
       ### Performance
       - [ ] API response times < 200ms
       - [ ] Database queries optimized
       - [ ] Image upload handling efficient
       ```

  ## Feature Development Best Practices
  1. **Incremental Development:**
     - Deliver working software frequently
     - Get feedback early and often
     - Maintain deployable state
     - Use feature flags for gradual rollout

  2. **Quality Assurance:**
     - Write tests before or alongside code
     - Maintain high test coverage
     - Regular code reviews
     - Continuous integration validation

  3. **Collaboration:**
     - Regular communication with stakeholders
     - Design reviews for complex features
     - Knowledge sharing sessions
     - Pair programming for complex logic

  ## Feature Validation
  1. **Acceptance Testing:**
     - Validate against acceptance criteria
     - User acceptance testing (UAT)
     - Stakeholder review and approval
     - Performance benchmarking

  2. **Production Readiness:**
     - Feature flags configured
     - Monitoring and alerting set up
     - Rollback procedures documented
     - Support documentation created

  ## Success Criteria
  - ✅ Feature meets all acceptance criteria
  - ✅ Code quality standards maintained
  - ✅ Comprehensive test coverage achieved
  - ✅ Security requirements satisfied
  - ✅ Documentation complete and accurate
  - ✅ Performance targets met
  - ✅ Code review approved by team
  - ✅ Ready for production deployment

  Execute each phase iteratively, ensuring quality and stakeholder alignment throughout the development process.
