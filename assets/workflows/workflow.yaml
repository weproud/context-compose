version: 1
kind: workflow
name: Default Workflow
description: Comprehensive task-action workflow with quality gates and validation
jobs:
  steps:
    - name: Create a new feature branch
      uses: actions/create-branch.yaml
      description: Create a properly named feature branch from the latest main/develop branch

    - name: Development
      uses: actions/development.yaml
      description: Implement the task requirements following best practices and coding standards

    - name: Test
      uses: actions/test.yaml
      description: Execute comprehensive testing suite including unit, integration, and e2e tests

    - name: Commit the changes
      uses: actions/git-commit.yaml
      description: Stage and commit changes with conventional commit messages

    - name: Push the changes
      uses: actions/git-push.yaml
      description: Push committed changes to remote repository with safety checks

    - name: Create a pull request
      uses: actions/create-pull-request.yaml
      description: Create a comprehensive pull request with detailed description and proper reviewers

    - name: Send a message to Slack
      uses: actions/send-message-slack.yaml
      description: Notify team members about task completion and pull request creation

    - name: Task Done
      uses: actions/task-done.yaml
      description: Finalize task completion with validation, cleanup, and comprehensive team notification

prompt: Execute complete task-action workflow sequentially with quality gates. Create branch, develop with best practices, test comprehensively, commit conventionally, push safely, create detailed PR, notify team, and finalize completion.
prompt-enhanced: |-
  Execute the complete task-action workflow following these comprehensive guidelines:

  ## Workflow Execution Strategy
  1. **Sequential Processing**:
     - Execute each step in the defined order
     - Validate successful completion before proceeding to next step
     - Handle errors gracefully with appropriate rollback procedures
     - Maintain detailed logs of each step's execution

  2. **Quality Gates**:
     - Each step must meet defined quality criteria before proceeding
     - Implement validation checkpoints between major phases
     - Ensure all tests pass before code integration
     - Verify documentation and code quality standards

  ## Step-by-Step Execution
  1. **Branch Creation Phase**:
     - Ensure clean working directory before branch creation
     - Verify base branch is up-to-date with remote
     - Create appropriately named feature branch
     - Confirm successful checkout to new branch

  2. **Development Phase**:
     - Follow comprehensive development guidelines
     - Implement only explicitly requested features
     - Maintain code quality and documentation standards
     - Apply security and performance best practices

  3. **Testing Phase**:
     - Execute full test suite with comprehensive coverage
     - Validate all quality metrics and performance benchmarks
     - Ensure no regressions in existing functionality
     - Document any test failures and resolution steps

  4. **Integration Phase**:
     - Stage and commit changes with meaningful messages
     - Push changes with proper safety checks
     - Create detailed pull request with comprehensive information
     - Ensure all CI/CD checks pass successfully

  5. **Communication Phase**:
     - Notify relevant team members through configured channels
     - Provide comprehensive task completion summary
     - Include links to pull request and relevant documentation
     - Highlight any important considerations or next steps

  6. **Completion Phase**:
     - Perform final validation of all requirements
     - Execute cleanup and optimization tasks
     - Update task status and project tracking
     - Document lessons learned and process improvements

  ## Error Handling & Recovery
  1. **Failure Management**:
     - Stop workflow execution on critical failures
     - Provide clear error messages and resolution guidance
     - Implement rollback procedures for partial completions
     - Log detailed error information for debugging

  2. **Retry Logic**:
     - Implement intelligent retry mechanisms for transient failures
     - Use exponential backoff for network-related operations
     - Limit retry attempts to prevent infinite loops
     - Escalate persistent failures to human intervention

  ## Workflow Monitoring
  1. **Progress Tracking**:
     - Provide real-time status updates for each step
     - Estimate completion times and remaining work
     - Highlight blockers and dependencies
     - Generate progress reports for stakeholders

  2. **Quality Metrics**:
     - Track code quality metrics throughout workflow
     - Monitor test coverage and performance benchmarks
     - Validate security and compliance requirements
     - Generate quality reports and recommendations

  ## Customization & Flexibility
  1. **Conditional Execution**:
     - Skip optional steps based on task requirements
     - Adapt workflow based on project configuration
     - Handle different task types with appropriate variations
     - Support emergency or hotfix workflows

  2. **Configuration Management**:
     - Use environment-specific configurations
     - Support different notification channels and preferences
     - Adapt to team-specific processes and requirements
     - Maintain workflow versioning and change management

  ## Success Criteria
  The workflow is considered successful when:
  - All steps complete without critical errors
  - Code quality and testing standards are met
  - Pull request is created and ready for review
  - Team notifications are sent successfully
  - Task status is properly updated
  - All documentation is current and accurate

  Execute each step methodically, ensuring quality and completeness at every stage.
