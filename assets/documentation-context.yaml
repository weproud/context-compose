version: 1
kind: task
name: 'documentation'
description: 'Context for comprehensive documentation with user-centric approach'

context:
  workflow: workflows/workflow.yaml
  roles:
    - roles/sindre-sorhus.yaml
    - roles/dan-abramov.yaml
  rules:
    - rules/the-must-follow.yaml
    - rules/documentation-standards.yaml
    - rules/clean-code.yaml
    - rules/api-design.yaml
  mcps:
    - mcps/sequential-thinking.yaml
    - mcps/context7.yaml
    - mcps/web-search.yaml
  notify:
    - notify/slack.yaml
prompt: |
  # Documentation Context

  ## Documentation Philosophy
  Documentation is the core of **knowledge sharing** and **developer experience improvement**. Create practical and accessible documents with a **user-centric approach**, making **living documents that evolve with code**.

  ## Documentation Principles
  1. **User-Centric**: Provide necessary information from the reader's perspective
  2. **Practicality**: Include practical examples and guides that can be actually used
  3. **Consistency**: Maintain unified format and style
  4. **Currency**: Update documentation along with code changes
  5. **Accessibility**: Consider users of various skill levels

  ## Documentation Process
  1. **Documentation Planning**
     - Analyze target audience and identify requirements
     - Design document structure and information architecture
     - Define templates and guidelines for each document type
     - Establish document management and update processes

  2. **Content Creation**
     - Write clear and concise explanations
     - Include practical examples and code samples
     - Provide step-by-step guides and tutorials
     - Utilize visual elements (diagrams, screenshots)

  3. **Review & Improvement**
     - Verify technical accuracy
     - Collect and incorporate user feedback
     - Improve document quality and readability
     - Continuous updates and maintenance

  ## Document Type Guidelines
  1. **README Documentation**
     ```markdown
     # Project Name

     Simple and clear project description

     ## üöÄ Quick Start

     ```bash
     # Installation
     npm install project-name

     # Run
     npm start
     ```

     ## ‚ú® Key Features

     - ‚úÖ Feature 1: Brief description
     - ‚úÖ Feature 2: Brief description
     - üöß Feature 3: In development

     ## üìñ Usage

     ### Basic Usage
     ```typescript
     import { ProjectClass } from 'project-name';

     const instance = new ProjectClass({
       apiKey: 'your-api-key'
     });

     const result = await instance.performAction();
     console.log(result);
     ```

     ## üìö Documentation

     - [API Documentation](./docs/api.md)
     - [Installation Guide](./docs/installation.md)
     - [Examples](./examples/)

     ## ü§ù Contributing

     1. Fork the repository
     2. Create your feature branch
     3. Commit your changes
     4. Push to the branch
     5. Open a Pull Request

     ## üìÑ License

     MIT License - See [LICENSE](LICENSE) file
     ```

  2. **API Documentation**
     ```markdown
     # API Documentation

     ## Authentication

     All API requests require a Bearer token.

     ```bash
     curl -H "Authorization: Bearer YOUR_TOKEN" \
          https://api.example.com/v1/users
     ```

     ## Endpoints

     ### User Management

     #### GET /api/v1/users

     Retrieve user list.

     **Parameters:**
     - `page` (optional): Page number (default: 1)
     - `limit` (optional): Items per page (default: 10)

     **Response:**
     ```json
     {
       "success": true,
       "data": [
         {
           "id": "123",
           "name": "John Doe",
           "email": "john@example.com"
         }
       ],
       "pagination": {
         "page": 1,
         "limit": 10,
         "total": 100
       }
     }
     ```

     **Example:**
     ```bash
     curl "https://api.example.com/v1/users?page=1&limit=5" \
          -H "Authorization: Bearer YOUR_TOKEN"
     ```
     ```

  3. **Installation & Setup Guide**
     ```markdown
     # Installation Guide

     ## System Requirements

     - Node.js 18.0 or higher
     - npm 8.0 or higher, or yarn 1.22 or higher
     - PostgreSQL 14 or higher (optional)

     ## Step-by-Step Installation

     ### 1. Clone Repository

     ```bash
     git clone https://github.com/username/project.git
     cd project
     ```

     ### 2. Install Dependencies

     ```bash
     # Using npm
     npm install

     # Or using yarn
     yarn install
     ```

     ### 3. Environment Variables Setup

     ```bash
     cp .env.example .env
     ```

     Edit the `.env` file and enter the required settings:

     ```env
     # Database configuration
     DATABASE_URL=postgresql://user:password@localhost:5432/dbname

     # JWT configuration
     JWT_SECRET=your-secret-key
     JWT_EXPIRES_IN=24h

     # External services
     REDIS_URL=redis://localhost:6379
     ```

     ### 4. Database Setup

     ```bash
     # Run migrations
     npm run db:migrate

     # Generate seed data (optional)
     npm run db:seed
     ```

     ### 5. Run Application

     ```bash
     # Development mode
     npm run dev

     # Production mode
     npm run build
     npm start
     ```

     ## Troubleshooting

     ### Common Issues

     **Q: Port 3000 is already in use**
     A: Change to `PORT=3001` in the `.env` file or use a different port.

     **Q: Database connection error**
     A: Verify PostgreSQL is running and validate the DATABASE_URL in the `.env` file.
     ```

  ## Code Documentation
  1. **JSDoc Comments**
     ```typescript
     /**
      * Updates user profile.
      *
      * @param userId - Unique identifier of the user to update
      * @param updateData - User data to update
      * @param options - Update options
      * @param options.validateEmail - Whether to validate email (default: true)
      * @returns Promise containing updated user information
      *
      * @example
      * ```typescript
      * const updatedUser = await updateUserProfile('123', {
      *   name: 'John Doe',
      *   email: 'john@example.com'
      * });
      * console.log(updatedUser.name); // 'John Doe'
      * ```
      *
      * @throws {UserNotFoundError} When user cannot be found
      * @throws {ValidationError} When input data is invalid
      *
      * @since 1.2.0
      */
     async function updateUserProfile(
       userId: string,
       updateData: Partial<UserProfile>,
       options: { validateEmail?: boolean } = {}
     ): Promise<UserProfile> {
       // Implementation...
     }
     ```

  2. **Inline Comments**
     ```typescript
     export class UserService {
       async createUser(userData: CreateUserDto): Promise<User> {
         // Email duplicate check - verify if user with same email exists
         const existingUser = await this.userRepository.findByEmail(userData.email);
         if (existingUser) {
           throw new ConflictException('Email already exists');
         }

         // Password hashing - securely store using bcrypt
         const hashedPassword = await bcrypt.hash(userData.password, 12);

         // User creation and save
         const user = this.userRepository.create({
           ...userData,
           password: hashedPassword,
           // Default settings - new users start in inactive state
           isActive: false,
           emailVerified: false
         });

         return this.userRepository.save(user);
       }
     }
     ```

  ## Architecture Documentation
  ```markdown
  # System Architecture

  ## Overview

  This system is built on a microservices architecture.

  ```mermaid
  graph TB
      A[Client] --> B[API Gateway]
      B --> C[Auth Service]
      B --> D[User Service]
      B --> E[Order Service]

      C --> F[Auth DB]
      D --> G[User DB]
      E --> H[Order DB]

      D --> I[Redis Cache]
      E --> I
  ```

  ## Service Configuration

  ### API Gateway
  - **Role**: Request routing, authentication, rate limiting
  - **Technology**: Express.js, JWT
  - **Port**: 3000

  ### Auth Service
  - **Role**: User authentication and authorization management
  - **Technology**: Node.js, JWT, bcrypt
  - **Port**: 3001
  - **Database**: PostgreSQL

  ### User Service
  - **Role**: User information management
  - **Technology**: Node.js, TypeORM
  - **Port**: 3002
  - **Database**: PostgreSQL
  - **Cache**: Redis

  ## Data Flow

  1. Client sends request to API Gateway
  2. API Gateway verifies authentication token
  3. Route request to appropriate service
  4. Service processes business logic
  5. Database query/modification
  6. Return response to client
  ```

  ## Documentation Automation
  ```typescript
  // Automatic documentation generation using TypeDoc
  {
    "scripts": {
      "docs:generate": "typedoc src --out docs --theme minimal",
      "docs:serve": "http-server docs -p 8080"
    }
  }

  // Swagger/OpenAPI automatic generation
  const config = new DocumentBuilder()
    .setTitle('API Documentation')
    .setDescription('Auto-generated API documentation')
    .setVersion('1.0')
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document);
  ```

  ## Documentation Quality Management
  1. **Documentation Review Process**
     - Verify technical accuracy
     - Evaluate readability and clarity
     - Confirm example code functionality
     - Review usefulness from user perspective

  2. **Documentation Metrics**
     - Documentation coverage (documentation ratio vs APIs)
     - User feedback scores
     - Documentation update frequency
     - Search and accessibility metrics

  ## Success Criteria
  - ‚úÖ All public APIs documented
  - ‚úÖ Installation and setup guide provided
  - ‚úÖ Practical examples and tutorials included
  - ‚úÖ Code comments and inline documentation
  - ‚úÖ Architecture and design documentation written
  - ‚úÖ Automated documentation generation and deployment
  - ‚úÖ User feedback collection and improvement

  **Ready to start documentation. What documentation would you like to create?**
