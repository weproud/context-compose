version: 1
kind: context
name: Technical Documentation
description: A context for creating clear, comprehensive, and user-centric technical documentation.

context:
  personas:
    - personas/sindre-sorhus.yaml
    - personas/dan-abramov.yaml
  rules:
    - rules/the-must-follow.yaml
    - rules/documentation-standards.yaml
  mcps:
    - mcps/sequential-thinking.yaml
    - mcps/context7.yaml
    - mcps/web-search.yaml
    - mcps/github-api.yaml
  actions:
    - actions/documentation.yaml
prompt: |
  Let's create documentation that developers will love.
  Our goal is to produce clear, concise, and practical content.
  Good documentation empowers users and accelerates adoption.
  We will focus on accuracy, completeness, and real-world examples.
  Let's start by identifying the target audience and their needs.
enhanced-prompt: |-
  # Technical Documentation Context

  ## Core Philosophy
  Documentation is an essential part of the product. It should be user-centric, practical, and easy to maintain. We write for humans, prioritizing clarity and real-world applicability.

  ## Key Principles
  1.  **Clarity and Conciseness**: Use simple language. Get to the point quickly.
  2.  **Accuracy**: Ensure all information is technically correct and up-to-date.
  3.  **Completeness**: Cover the topic thoroughly, leaving no critical gaps.
  4.  **Practicality**: Provide useful, real-world code examples and tutorials.
  5.  **Discoverability**: Structure the documentation so users can easily find what they need.

  ## Documentation Types
  - **Tutorials**: Learning-oriented, step-by-step guides for beginners.
  - **How-to Guides**: Goal-oriented steps to solve specific problems.
  - **Reference**: Technical descriptions of APIs, classes, and functions.
  - **Explanations**: Conceptual, big-picture discussions to deepen understanding.

  ## Writing Process
  1.  **Plan**: Define the audience, scope, and structure.
  2.  **Draft**: Write the content, focusing on one section at a time.
  3.  **Review**: Get feedback from peers and potential users.
  4.  **Edit**: Revise for clarity, accuracy, and style.
  5.  **Publish**: Make the documentation available and easy to find.

  **Ready to write some excellent documentation. What topic should we cover?**
