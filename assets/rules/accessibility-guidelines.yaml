version: 1
kind: rule
name: Accessibility Guidelines
description: Comprehensive accessibility guidelines for inclusive web applications
prompt: Follow accessibility best practices to create inclusive applications for all users
enhanced-prompt: |-
  Follow these comprehensive accessibility guidelines to create inclusive applications for all users:

  ## Core Accessibility Principles (WCAG 2.1)
  1. **Perceivable:**
     - Provide text alternatives for non-text content
     - Offer captions and alternatives for multimedia
     - Ensure sufficient color contrast
     - Make content adaptable to different presentations

  2. **Operable:**
     - Make all functionality keyboard accessible
     - Give users enough time to read content
     - Don't use content that causes seizures
     - Help users navigate and find content

  3. **Understandable:**
     - Make text readable and understandable
     - Make content appear and operate predictably
     - Help users avoid and correct mistakes

  4. **Robust:**
     - Maximize compatibility with assistive technologies
     - Use valid, semantic HTML
     - Ensure content works across different browsers and devices

  ## Semantic HTML & Structure
  1. **Proper HTML Elements:**
     ```html
     <!-- Use semantic elements -->
     <header>
       <nav aria-label="Main navigation">
         <ul>
           <li><a href="/">Home</a></li>
           <li><a href="/about">About</a></li>
         </ul>
       </nav>
     </header>
     
     <main>
       <article>
         <h1>Article Title</h1>
         <p>Article content...</p>
       </article>
     </main>
     
     <aside aria-label="Related links">
       <h2>Related Articles</h2>
       <!-- Related content -->
     </aside>
     ```

  2. **Heading Hierarchy:**
     ```html
     <!-- Maintain logical heading structure -->
     <h1>Page Title</h1>
       <h2>Section Title</h2>
         <h3>Subsection Title</h3>
         <h3>Another Subsection</h3>
       <h2>Another Section</h2>
     ```

  ## ARIA (Accessible Rich Internet Applications)
  1. **ARIA Labels & Descriptions:**
     ```html
     <!-- Descriptive labels -->
     <button aria-label="Close dialog">×</button>
     <input aria-describedby="password-help" type="password">
     <div id="password-help">Password must be at least 8 characters</div>
     
     <!-- Live regions for dynamic content -->
     <div aria-live="polite" aria-atomic="true" id="status">
       <!-- Status updates appear here -->
     </div>
     ```

  2. **ARIA States & Properties:**
     ```html
     <!-- Interactive elements -->
     <button aria-expanded="false" aria-controls="menu">Menu</button>
     <ul id="menu" aria-hidden="true">
       <li><a href="/page1">Page 1</a></li>
       <li><a href="/page2">Page 2</a></li>
     </ul>
     
     <!-- Form validation -->
     <input 
       aria-invalid="true" 
       aria-describedby="email-error"
       type="email"
     >
     <div id="email-error" role="alert">
       Please enter a valid email address
     </div>
     ```

  ## Keyboard Navigation
  1. **Focus Management:**
     ```typescript
     // Manage focus for dynamic content
     const openModal = () => {
       setModalOpen(true);
       // Focus first focusable element in modal
       setTimeout(() => {
         const firstFocusable = modal.querySelector(
           'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
         );
         firstFocusable?.focus();
       }, 0);
     };
     
     // Trap focus within modal
     const handleKeyDown = (e: KeyboardEvent) => {
       if (e.key === 'Escape') {
         closeModal();
       }
       if (e.key === 'Tab') {
         trapFocus(e);
       }
     };
     ```

  2. **Skip Links:**
     ```html
     <a href="#main-content" class="skip-link">
       Skip to main content
     </a>
     
     <style>
     .skip-link {
       position: absolute;
       top: -40px;
       left: 6px;
       background: #000;
       color: #fff;
       padding: 8px;
       text-decoration: none;
       transition: top 0.3s;
     }
     
     .skip-link:focus {
       top: 6px;
     }
     </style>
     ```

  ## Color & Contrast
  1. **Color Contrast Requirements:**
     ```css
     /* WCAG AA: 4.5:1 for normal text, 3:1 for large text */
     .text-normal {
       color: #333333; /* 12.6:1 contrast on white */
       background: #ffffff;
     }
     
     .text-large {
       color: #666666; /* 5.7:1 contrast on white */
       background: #ffffff;
       font-size: 18px;
       font-weight: bold;
     }
     ```

  2. **Color Independence:**
     ```css
     /* Don't rely solely on color for information */
     .error {
       color: #d32f2f;
       border-left: 4px solid #d32f2f; /* Visual indicator */
     }
     
     .error::before {
       content: "⚠ "; /* Icon indicator */
     }
     ```

  ## Images & Media
  1. **Alternative Text:**
     ```html
     <!-- Informative images -->
     <img src="chart.png" alt="Sales increased 25% from Q1 to Q2">
     
     <!-- Decorative images -->
     <img src="decoration.png" alt="" role="presentation">
     
     <!-- Complex images -->
     <img src="complex-chart.png" alt="Quarterly sales data" 
          aria-describedby="chart-description">
     <div id="chart-description">
       Detailed description of the chart data...
     </div>
     ```

  2. **Video & Audio:**
     ```html
     <video controls>
       <source src="video.mp4" type="video/mp4">
       <track kind="captions" src="captions.vtt" srclang="en" label="English">
       <track kind="descriptions" src="descriptions.vtt" srclang="en">
     </video>
     ```

  ## Forms & Input
  1. **Form Labels & Instructions:**
     ```html
     <form>
       <fieldset>
         <legend>Personal Information</legend>
         
         <label for="first-name">
           First Name <span aria-label="required">*</span>
         </label>
         <input 
           id="first-name" 
           type="text" 
           required 
           aria-describedby="name-help"
         >
         <div id="name-help">Enter your legal first name</div>
         
         <label for="email">Email Address</label>
         <input 
           id="email" 
           type="email" 
           aria-invalid="false"
           aria-describedby="email-error"
         >
         <div id="email-error" role="alert" aria-live="polite">
           <!-- Error messages appear here -->
         </div>
       </fieldset>
     </form>
     ```

  2. **Error Handling:**
     ```typescript
     const validateForm = (formData: FormData) => {
       const errors: Record<string, string> = {};
       
       if (!formData.email) {
         errors.email = 'Email is required';
       } else if (!isValidEmail(formData.email)) {
         errors.email = 'Please enter a valid email address';
       }
       
       // Update ARIA attributes
       Object.keys(errors).forEach(field => {
         const input = document.getElementById(field);
         const errorDiv = document.getElementById(`${field}-error`);
         
         input?.setAttribute('aria-invalid', 'true');
         if (errorDiv) {
           errorDiv.textContent = errors[field];
         }
       });
       
       return errors;
     };
     ```

  ## Interactive Components
  1. **Custom Components:**
     ```typescript
     // Accessible dropdown component
     const Dropdown = ({ options, onSelect }) => {
       const [isOpen, setIsOpen] = useState(false);
       const [selectedIndex, setSelectedIndex] = useState(-1);
       
       const handleKeyDown = (e: KeyboardEvent) => {
         switch (e.key) {
           case 'Enter':
           case ' ':
             e.preventDefault();
             if (selectedIndex >= 0) {
               onSelect(options[selectedIndex]);
             }
             break;
           case 'ArrowDown':
             e.preventDefault();
             setSelectedIndex(prev => 
               Math.min(prev + 1, options.length - 1)
             );
             break;
           case 'ArrowUp':
             e.preventDefault();
             setSelectedIndex(prev => Math.max(prev - 1, 0));
             break;
           case 'Escape':
             setIsOpen(false);
             break;
         }
       };
       
       return (
         <div role="combobox" aria-expanded={isOpen}>
           {/* Component implementation */}
         </div>
       );
     };
     ```

  ## Testing & Validation
  1. **Automated Testing:**
     ```typescript
     // Use accessibility testing libraries
     import { axe, toHaveNoViolations } from 'jest-axe';
     
     expect.extend(toHaveNoViolations);
     
     test('should not have accessibility violations', async () => {
       const { container } = render(<Component />);
       const results = await axe(container);
       expect(results).toHaveNoViolations();
     });
     ```

  2. **Manual Testing:**
     - Test with keyboard navigation only
     - Use screen reader software (NVDA, JAWS, VoiceOver)
     - Test with high contrast mode
     - Validate with accessibility browser extensions

  ## Success Criteria
  - ✅ WCAG 2.1 AA compliance achieved
  - ✅ All interactive elements keyboard accessible
  - ✅ Proper ARIA labels and roles implemented
  - ✅ Sufficient color contrast maintained
  - ✅ Screen reader compatibility verified
  - ✅ Form validation accessible and clear
