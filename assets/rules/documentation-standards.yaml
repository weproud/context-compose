version: 1
kind: rule
name: Documentation Standards
description: Comprehensive documentation standards for maintainable and accessible code
prompt: Follow documentation best practices for clear, comprehensive, and maintainable documentation
enhanced-prompt: |-
  Follow these comprehensive documentation standards to create clear, maintainable, and accessible documentation:

  ## Documentation Philosophy
  1. **User-Centric Approach:**
     - Write for your audience (developers, users, maintainers)
     - Provide context and explain the "why" not just the "what"
     - Include practical examples and use cases
     - Anticipate common questions and edge cases

  2. **Living Documentation:**
     - Keep documentation up-to-date with code changes
     - Integrate documentation into development workflow
     - Use automated tools to validate documentation
     - Regular review and maintenance cycles

  ## Code Documentation
  1. **Function & Method Documentation:**
     ```typescript
     /**
      * Calculates the total price including tax and discounts
      * 
      * @param basePrice - The original price before modifications
      * @param taxRate - Tax rate as decimal (e.g., 0.08 for 8%)
      * @param discountPercent - Discount percentage (0-100)
      * @returns The final price after tax and discount
      * 
      * @example
      * ```typescript
      * const total = calculateTotal(100, 0.08, 10);
      * console.log(total); // 97.2 (100 - 10% discount + 8% tax)
      * ```
      * 
      * @throws {Error} When taxRate is negative or discountPercent > 100
      */
     function calculateTotal(
       basePrice: number, 
       taxRate: number, 
       discountPercent: number
     ): number {
       if (taxRate < 0) {
         throw new Error('Tax rate cannot be negative');
       }
       if (discountPercent > 100) {
         throw new Error('Discount cannot exceed 100%');
       }
       
       const discountAmount = basePrice * (discountPercent / 100);
       const discountedPrice = basePrice - discountAmount;
       return discountedPrice * (1 + taxRate);
     }
     ```

  2. **Class Documentation:**
     ```typescript
     /**
      * Manages user authentication and session handling
      * 
      * Provides methods for login, logout, token refresh, and session validation.
      * Automatically handles token storage and renewal.
      * 
      * @example
      * ```typescript
      * const auth = new AuthManager({
      *   apiUrl: 'https://api.example.com',
      *   tokenStorage: 'localStorage'
      * });
      * 
      * await auth.login('user@example.com', 'password');
      * const isValid = auth.isSessionValid();
      * ```
      */
     class AuthManager {
       /**
        * Creates a new AuthManager instance
        * 
        * @param config - Configuration options
        * @param config.apiUrl - Base URL for authentication API
        * @param config.tokenStorage - Storage method for tokens ('localStorage' | 'sessionStorage' | 'memory')
        * @param config.refreshThreshold - Time before expiry to refresh token (in seconds, default: 300)
        */
       constructor(config: AuthConfig) {
         // Implementation
       }
     }
     ```

  ## API Documentation
  1. **REST API Documentation:**
     ```yaml
     # OpenAPI/Swagger specification
     paths:
       /api/users/{id}:
         get:
           summary: Get user by ID
           description: |
             Retrieves a user's information by their unique identifier.
             Requires authentication and appropriate permissions.
           parameters:
             - name: id
               in: path
               required: true
               schema:
                 type: string
                 format: uuid
               description: Unique identifier for the user
           responses:
             '200':
               description: User information retrieved successfully
               content:
                 application/json:
                   schema:
                     $ref: '#/components/schemas/User'
                   example:
                     id: "123e4567-e89b-12d3-a456-426614174000"
                     name: "John Doe"
                     email: "john@example.com"
             '404':
               description: User not found
             '403':
               description: Insufficient permissions
     ```

  2. **GraphQL Documentation:**
     ```graphql
     """
     Represents a user in the system
     """
     type User {
       """
       Unique identifier for the user
       """
       id: ID!
       
       """
       User's full name
       """
       name: String!
       
       """
       User's email address (unique)
       """
       email: String!
       
       """
       User's posts (paginated)
       """
       posts(
         """
         Number of posts to return (max 100)
         """
         first: Int = 10
         
         """
         Cursor for pagination
         """
         after: String
       ): PostConnection!
     }
     ```

  ## README Documentation
  1. **Project README Structure:**
     ```markdown
     # Project Name
     
     Brief description of what the project does and why it exists.
     
     ## Features
     
     - âœ… Feature 1 with brief description
     - âœ… Feature 2 with brief description
     - ðŸš§ Feature 3 (in development)
     
     ## Quick Start
     
     ```bash
     # Installation
     npm install project-name
     
     # Basic usage
     npm start
     ```
     
     ## Installation
     
     ### Prerequisites
     
     - Node.js 18+ 
     - npm 8+
     - PostgreSQL 14+
     
     ### Step-by-step Installation
     
     1. Clone the repository
        ```bash
        git clone https://github.com/user/project.git
        cd project
        ```
     
     2. Install dependencies
        ```bash
        npm install
        ```
     
     3. Set up environment variables
        ```bash
        cp .env.example .env
        # Edit .env with your configuration
        ```
     
     4. Run database migrations
        ```bash
        npm run db:migrate
        ```
     
     5. Start the development server
        ```bash
        npm run dev
        ```
     
     ## Usage
     
     ### Basic Example
     
     ```typescript
     import { ProjectClass } from 'project-name';
     
     const instance = new ProjectClass({
       apiKey: 'your-api-key',
       environment: 'development'
     });
     
     const result = await instance.performAction();
     console.log(result);
     ```
     
     ### Advanced Configuration
     
     ```typescript
     const advancedConfig = {
       retries: 3,
       timeout: 5000,
       cache: {
         enabled: true,
         ttl: 300
       }
     };
     ```
     
     ## API Reference
     
     ### Core Methods
     
     #### `performAction(options)`
     
     Performs the main action of the library.
     
     **Parameters:**
     - `options` (Object): Configuration options
       - `data` (Array): Input data to process
       - `format` (String): Output format ('json' | 'xml' | 'csv')
     
     **Returns:** Promise<Result>
     
     **Example:**
     ```typescript
     const result = await instance.performAction({
       data: [1, 2, 3],
       format: 'json'
     });
     ```
     
     ## Configuration
     
     | Option | Type | Default | Description |
     |--------|------|---------|-------------|
     | `apiKey` | string | - | Your API key (required) |
     | `timeout` | number | 5000 | Request timeout in ms |
     | `retries` | number | 3 | Number of retry attempts |
     
     ## Contributing
     
     1. Fork the repository
     2. Create a feature branch (`git checkout -b feature/amazing-feature`)
     3. Commit your changes (`git commit -m 'Add amazing feature'`)
     4. Push to the branch (`git push origin feature/amazing-feature`)
     5. Open a Pull Request
     
     ## License
     
     This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
     ```

  ## Architecture Documentation
  1. **System Architecture:**
     ```markdown
     # System Architecture
     
     ## Overview
     
     The system follows a microservices architecture with the following components:
     
     ```mermaid
     graph TB
         A[Client] --> B[API Gateway]
         B --> C[Auth Service]
         B --> D[User Service]
         B --> E[Order Service]
         D --> F[User Database]
         E --> G[Order Database]
     ```
     
     ## Components
     
     ### API Gateway
     - **Purpose**: Route requests and handle cross-cutting concerns
     - **Technology**: Express.js with middleware
     - **Responsibilities**:
       - Request routing
       - Authentication validation
       - Rate limiting
       - Request/response logging
     
     ### Auth Service
     - **Purpose**: Handle user authentication and authorization
     - **Technology**: Node.js with JWT
     - **Database**: Redis for session storage
     ```

  ## Changelog Documentation
  ```markdown
  # Changelog
  
  All notable changes to this project will be documented in this file.
  
  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
  
  ## [Unreleased]
  
  ### Added
  - New feature for user preferences
  
  ### Changed
  - Improved error handling in API calls
  
  ### Fixed
  - Fixed memory leak in background tasks
  
  ## [2.1.0] - 2024-01-15
  
  ### Added
  - User authentication system
  - Password reset functionality
  - Email verification
  
  ### Changed
  - Updated dependencies to latest versions
  - Improved API response times by 30%
  
  ### Deprecated
  - Old authentication endpoints (will be removed in v3.0.0)
  
  ### Fixed
  - Fixed race condition in user registration
  - Resolved CORS issues with external APIs
  ```

  ## Documentation Maintenance
  1. **Automated Validation:**
     - Use tools like `doctoc` for table of contents generation
     - Implement link checking in CI/CD pipeline
     - Validate code examples with automated tests
     - Use spell checkers and grammar tools

  2. **Review Process:**
     - Include documentation updates in code reviews
     - Regular documentation audits and updates
     - User feedback collection and incorporation
     - Version documentation alongside code releases

  ## Success Criteria
  - âœ… All public APIs documented with examples
  - âœ… README provides clear setup instructions
  - âœ… Code comments explain complex logic
  - âœ… Architecture decisions documented
  - âœ… Changelog maintained with all releases
  - âœ… Documentation stays current with code changes
