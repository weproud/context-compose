version: 1
kind: task
name: 'performance-optimization'
description: 'Context for performance optimization with metrics monitoring and improvement strategies'

context:
  workflow: workflows/workflow.yaml
  roles:
- personas/john-carmack.yaml
- personas/brendan-eich.yaml
  rules:
    - rules/the-must-follow.yaml
    - rules/performance-guidelines.yaml
    - rules/clean-code.yaml
    - rules/development.yaml
    - rules/testing-principles.yaml
  mcps:
    - mcps/sequential-thinking.yaml
    - mcps/context7.yaml
    - mcps/web-search.yaml
prompt: |
  Optimize application performance through systematic analysis and targeted improvements.
  Focus on critical path optimization and measurable performance gains.
  Implement monitoring systems and establish performance benchmarks.
  Balance optimization efforts with code maintainability and development velocity.
enhanced-prompt: |-
  # Performance Optimization Context

  ## Performance Philosophy
  Optimize application performance through **systematic analysis** and **targeted improvements** focusing on **critical path optimization** and **measurable performance gains**.

  ## Performance Optimization Process
  1. **Performance Analysis & Profiling:**
     - Establish baseline performance metrics and benchmarks
     - Identify performance bottlenecks using profiling tools
     - Analyze critical user paths and high-traffic scenarios
     - Monitor real-world performance data and user experience metrics

  2. **Optimization Strategy:**
     - Prioritize optimizations based on impact and effort analysis
     - Focus on critical rendering path and core business logic
     - Implement caching strategies and data optimization
     - Optimize resource loading and minimize bundle sizes

  3. **Implementation & Validation:**
     - Apply targeted performance improvements incrementally
     - Measure performance impact before and after changes
     - Conduct load testing and stress testing validation
     - Monitor production performance metrics continuously

  ## Key Performance Areas
  - **Load Time Optimization**: Minimize Time to First Byte (TTFB) and render times
  - **Runtime Performance**: Optimize CPU usage and memory consumption
  - **Network Optimization**: Reduce payload sizes and optimize request patterns
  - **Database Performance**: Query optimization and caching strategies
  - **Asset Optimization**: Image compression and efficient resource loading

  ## Performance Metrics & Targets
  - **Page Load Time**: < 2 seconds for initial load
  - **Time to Interactive**: < 3 seconds for user interaction readiness
  - **First Contentful Paint**: < 1.5 seconds for visual feedback
  - **Memory Usage**: < 50MB baseline for typical operations
  - **API Response Time**: < 200ms for database queries

  ## Optimization Techniques
  - **Code Splitting**: Dynamic imports and lazy loading
  - **Caching**: Browser caching, CDN, and application-level caching
  - **Compression**: Gzip/Brotli compression and asset minification
  - **Database**: Query optimization, indexing, and connection pooling
  - **Monitoring**: Real-time performance tracking and alerting

  ## Success Criteria
  - ✅ Performance targets achieved across all key metrics
  - ✅ No performance regressions in critical paths
  - ✅ Monitoring systems provide actionable insights
  - ✅ Code maintainability preserved during optimization
  - ✅ User experience significantly improved

  **Ready to optimize performance. What performance areas would you like to focus on?**
