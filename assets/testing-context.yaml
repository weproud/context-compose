version: 1
kind: context
name: testing context
description: Context for comprehensive testing strategy with unit, integration, and end-to-end testing

context:
  workflow: workflows/workflow.yaml
  roles:
- personas/kent-c-dodds.yaml
- personas/dan-abramov.yaml
  rules:
    - rules/the-must-follow.yaml
    - rules/testing-principles.yaml
    - rules/clean-code.yaml
    - rules/error-handling.yaml
    - rules/performance-guidelines.yaml
  mcps:
    - mcps/sequential-thinking.yaml
    - mcps/context7.yaml
    - mcps/playwright.yaml
    - mcps/web-search.yaml
  notify:
    - notify/slack.yaml
prompt: |
  Implement comprehensive testing strategy with high coverage and quality validation.
  Write unit, integration, and end-to-end tests following industry best practices.
  Focus on test reliability, maintainability, and meaningful coverage metrics.
  Ensure all edge cases and error scenarios are thoroughly tested and documented.
enhanced-prompt: |-
  # Testing Strategy Context

  ## Testing Philosophy
  Implement comprehensive testing strategy with **high coverage** and **quality validation** following **Test-Driven Development (TDD)** principles.

  ## Testing Pyramid Strategy
  1. **Unit Tests (70%):**
     - Test individual functions and components in isolation
     - Fast execution with minimal dependencies
     - High coverage of business logic and edge cases
     - Mock external dependencies and services

  2. **Integration Tests (20%):**
     - Test component interactions and API endpoints
     - Validate data flow between system layers
     - Test database operations and external service integrations
     - Ensure contract compliance between modules

  3. **End-to-End Tests (10%):**
     - Test complete user workflows and critical paths
     - Validate UI interactions and user experience
     - Test cross-browser compatibility and accessibility
     - Simulate real user scenarios and environments

  ## Testing Implementation Process
  1. **Test Planning & Setup:**
     - Define test strategy and coverage targets (90%+)
     - Set up testing framework and configuration
     - Create test data and mock services
     - Establish CI/CD integration for automated testing

  2. **Test Development:**
     - Write tests before or alongside implementation (TDD)
     - Create meaningful test descriptions and assertions
     - Implement proper test isolation and cleanup
     - Use data-driven testing for comprehensive coverage

  3. **Quality Assurance:**
     - Validate test reliability and consistency
     - Review test coverage reports and identify gaps
     - Ensure tests are maintainable and well-documented
     - Regular test suite optimization and refactoring

  ## Testing Best Practices
  - **Arrange-Act-Assert Pattern**: Clear test structure and organization
  - **Test Isolation**: Independent tests that don't affect each other
  - **Meaningful Assertions**: Test actual behavior, not implementation details
  - **Edge Case Coverage**: Test boundary conditions and error scenarios
  - **Performance Testing**: Validate response times and resource usage

  ## Success Criteria
  - ✅ Test coverage > 90% for critical code paths
  - ✅ All tests pass consistently in CI/CD pipeline
  - ✅ Edge cases and error scenarios covered
  - ✅ Tests are maintainable and well-documented
  - ✅ Performance benchmarks validated

  **Ready to implement comprehensive testing. What would you like to test?**
