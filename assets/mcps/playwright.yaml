version: 1
kind: mcp
name: playwright
description: Browser automation and end-to-end testing with Playwright
prompt: Create E2E tests and browser automation using Playwright with best practices
enhanced-prompt: |-
  # ðŸŽ­ Playwright E2E Testing

  ## Core Test Patterns

  **1. Test Setup**
  ```typescript
  import { test, expect, Page } from '@playwright/test';

  test.beforeEach(async ({ page }) => {
    await page.goto('/');
  });
  ```

  **2. Robust Selectors**
  ```typescript
  // Preferred selectors
  await page.getByTestId('submit-button').click();
  await page.getByRole('button', { name: 'Login' }).click();
  await page.getByText('Welcome').waitFor();

  // Avoid CSS selectors that depend on styling
  ```

  **3. Async Handling**
  ```typescript
  // Wait for elements
  await page.waitForSelector('[data-testid="results"]');

  // Wait for API responses
  await page.waitForResponse('**/api/users');

  // Assertions with auto-wait
  await expect(page.getByText('Success')).toBeVisible();
  ```

  **4. Page Object Model**
  ```typescript
  class LoginPage {
    constructor(private page: Page) {}
    
    async login(email: string, password: string) {
      await this.page.getByTestId('email').fill(email);
      await this.page.getByTestId('password').fill(password);
      await this.page.getByRole('button', { name: 'Login' }).click();
    }
  }
  ```

  **5. Visual & Accessibility Testing**
  ```typescript
  // Screenshot comparison
  await expect(page).toHaveScreenshot('homepage.png');

  // Accessibility testing
  const accessibilityScanResults = await new AxeBuilder({ page }).analyze();
  expect(accessibilityScanResults.violations).toEqual([]);
  ```

  **ðŸŽ¯ Result:** Reliable E2E tests with robust selectors and comprehensive validation
