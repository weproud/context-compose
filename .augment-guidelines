# Augment Agent Guidelines for Context Compose

## 프로젝트 컨텍스트
Context Compose는 AI 개발 워크플로우를 위한 MCP(Model Context Protocol) 서버 및 CLI 도구입니다.
TypeScript로 작성되었으며, FastMCP 프레임워크를 사용하여 AI 모델과의 통합을 제공합니다.

## 핵심 아키텍처 이해
- **MCP Server**: `mcp-server/` 디렉토리에 위치, FastMCP 기반
- **CLI Tool**: `src/` 디렉토리에 위치, Commander.js 기반
- **Context System**: YAML 파일로 정의된 컨텍스트, 워크플로우, 규칙 관리
- **Assets**: `assets/` 디렉토리에 기본 템플릿과 설정 파일들

## 개발 환경 및 도구
- **언어**: TypeScript (ES2022, Strict Mode)
- **런타임**: Node.js >=18.0.0
- **패키지 매니저**: pnpm (필수)
- **테스트**: Vitest
- **린팅**: ESLint 9.x + TypeScript ESLint
- **빌드**: TypeScript Compiler

## 코딩 스타일 및 규칙

### 파일 및 디렉토리 구조
```
src/
├── cli/           # CLI 명령어 구현
├── core/          # 핵심 로직 (env, utils)
├── schemas/       # Zod 스키마 정의
└── types/         # TypeScript 타입 정의

mcp-server/
├── src/
│   ├── tools/     # MCP 도구 구현
│   ├── index.ts   # 메인 서버 클래스
│   └── logger.ts  # 로깅 유틸리티
└── server.ts      # 서버 엔트리포인트
```

### 네이밍 컨벤션
- 파일명: kebab-case (`get-context.ts`)
- 클래스명: PascalCase (`ContextComposeServer`)
- 함수/변수명: camelCase (`registerMCPTools`)
- 상수명: UPPER_SNAKE_CASE (`DEFAULT_CONFIG_DIR`)
- 타입명: PascalCase (`InitToolInput`)

### 코드 품질 요구사항
- TypeScript Strict Mode 준수
- 모든 함수에 명시적 타입 정의
- any 타입 사용 금지 (unknown 사용 권장)
- 에러 핸들링 필수 구현
- JSDoc 주석으로 문서화

## MCP 도구 개발 패턴

### 새 MCP 도구 추가 시 따라야 할 단계:
1. **스키마 정의**: `src/schemas/`에 Zod 스키마 생성
2. **도구 구현**: `mcp-server/src/tools/`에 도구 로직 구현
3. **도구 등록**: `mcp-server/src/tools/index.ts`에 등록
4. **테스트 작성**: `tests/unit/`에 단위 테스트 추가

### MCP 도구 구현 템플릿:
```typescript
// 1. 스키마 정의
export const ToolSchema = z.object({
  param: z.string().describe('Parameter description'),
});

// 2. 도구 구현
export function registerTool(server: FastMCP): void {
  server.tool('tool-name', ToolSchema, async (params) => {
    const validatedInput = ToolSchema.parse(params);

    try {
      const result = await executeLogic(validatedInput);
      return {
        content: [{
          type: 'text',
          text: result.message,
        }],
      };
    } catch (error) {
      logger.error('Tool execution failed', { error });
      throw new MCPError('Tool failed', 'TOOL_ERROR');
    }
  });
}
```

## 파일 작업 가이드라인

### Context 파일 (YAML) 작업 시:
- `assets/` 디렉토리의 기존 파일들을 참조
- 버전 필드 (`version: 1`) 필수 포함
- kind 필드로 파일 타입 명시 (task, workflow, rule, role, mcp, notify)
- 설명(description) 필드 필수 포함

### TypeScript 파일 작업 시:
- 파일 상단에 명확한 주석으로 목적 설명
- export/import 문은 파일 최상단에 위치
- 함수는 async/await 패턴 사용 (Promise 체이닝 지양)
- 에러는 적절한 타입으로 캐치하고 로깅

## 테스트 작성 가이드

### 테스트 파일 위치 및 네이밍:
- 단위 테스트: `tests/unit/`
- 통합 테스트: `tests/integration/`
- 테스트 데이터: `tests/fixtures/`

### 테스트 작성 패턴:
```typescript
describe('Feature Name', () => {
  it('should handle success case', async () => {
    // Arrange
    const input = createTestInput();

    // Act
    const result = await functionUnderTest(input);

    // Assert
    expect(result.success).toBe(true);
  });

  it('should handle error case', async () => {
    // Arrange & Act & Assert
    await expect(functionUnderTest(invalidInput))
      .rejects.toThrow('Expected error message');
  });
});
```

## 환경 변수 및 설정

### 환경 변수 사용:
- `src/core/env.ts`의 EnvManager 클래스 사용
- 필수 환경변수: `EnvManager.getRequired('KEY')`
- 선택적 환경변수: `EnvManager.get('KEY', 'default')`

### 설정 파일:
- `.contextcompose/` 디렉토리에 프로젝트별 설정
- 기본 설정은 `assets/` 디렉토리 참조

## 에러 처리 및 로깅

### 에러 처리:
- 커스텀 에러 클래스 `MCPError` 사용
- 에러 메시지는 사용자 친화적으로 작성
- 민감한 정보 노출 금지

### 로깅:
- `mcp-server/src/logger.ts` 사용
- 로그 레벨: debug, info, warn, error
- 구조화된 로깅으로 메타데이터 포함

## 성능 및 보안 고려사항

### 성능:
- 파일 I/O는 비동기 처리 필수
- 대용량 파일은 스트림 사용
- 반복적인 작업은 캐싱 고려

### 보안:
- 사용자 입력은 Zod 스키마로 검증
- 파일 경로는 path.resolve()로 정규화
- 환경변수로 민감한 정보 관리

## 개발 워크플로우

### 코드 변경 전 체크리스트:
1. 기존 테스트가 통과하는지 확인: `pnpm test`
2. 린팅 오류 없는지 확인: `pnpm lint`
3. 타입 체크 통과: `pnpm type-check`
4. 빌드 성공: `pnpm build`

### 새 기능 개발 시:
1. 관련 기존 코드 파악 (codebase-retrieval 도구 활용)
2. 테스트 우선 작성 (TDD 방식 권장)
3. 최소 기능 구현
4. 리팩토링 및 최적화
5. 문서 업데이트

## 특별 주의사항

### MCP 서버 관련:
- FastMCP 프레임워크의 최신 패턴 준수
- 도구 등록 시 스키마 검증 필수
- 서버 시작/종료 시 적절한 리소스 정리

### CLI 도구 관련:
- Commander.js 패턴 준수
- 사용자 입력 검증 및 도움말 제공
- 진행 상황 표시 (긴 작업의 경우)

### Context 시스템 관련:
- YAML 파일 구조 일관성 유지
- 순환 참조 방지
- 파일 경로는 상대 경로 사용

## 패키지 관리 규칙

### 의존성 관리:
- 새 패키지 설치 시 pnpm 사용: `pnpm add package-name`
- 개발 의존성: `pnpm add -D package-name`
- package.json 직접 수정 금지 (패키지 매니저 사용)

### 버전 관리:
- Semantic Versioning 준수
- 호환성 깨지는 변경 시 MAJOR 버전 증가
- 새 기능 추가 시 MINOR 버전 증가
- 버그 수정 시 PATCH 버전 증가

## 문서화 요구사항

### 코드 문서화:
- 모든 public 함수/클래스에 JSDoc 주석
- 복잡한 로직에는 인라인 주석
- README.md 업데이트 (새 기능 추가 시)

### API 문서화:
- MCP 도구 추가 시 사용법 예시 포함
- 스키마 변경 시 마이그레이션 가이드 제공

이 가이드라인을 준수하여 Context Compose 프로젝트의 일관성과 품질을 유지해주세요.